{"version":3,"sources":["serviceWorker.ts","header/Header.tsx","home/home.tsx","list/view/liQue.tsx","list/action.ts","create/actionTypes.ts","Store.tsx","create/reducer.tsx","list/view/list.tsx","list/actionTypes.ts","create/view/option.tsx","create/action.tsx","create/view/controller.tsx","create/view/que.tsx","create/view/create.tsx","fill/view/que.tsx","fill/view/fill.tsx","fill/action.ts","fill/actionType.ts","data/view/canvas.tsx","data/view/queItem.tsx","data/view/data.tsx","Questionnaire.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","addEventListener","hash","document","getElementsByClassName","click","Header","mode","className","Item","onClick","Home","LiQue","id","state","name","editQue","scanData","fillQue","checked","changeChecked","list","changeList","data-id","span","onChange","event","target","filter","item","newItem","type","Date","parse","oldState","JSON","localStorage","getItem","bool","initialState","data","deadline","submit","que","parId","order","question","must","submitCount","answer","opt","index","content","count","nowQueId","reducers","action","newState","Object","keys","forEach","key","childState","combineReducers","map","parentId","message","error","queType","arr","stringify","obj","obj2","console","log","length","push","parIndex","number","find","title","nowState","totalContext","createContext","Providers","props","useReducer","dispatch","Provider","value","children","Lists","useContext","useState","useEffect","date","getTime","itemLayout","dataSource","header","footer","indeterminate","warn","renderItem","Option","removeOpt","updateOpt","placeholder","defaultValue","addQue","removeQue","upQue","downQue","copyQue","addOpt","removeAllOpt","updateQue","createItem","Controller","filterState","Que","optItem","optIndex","cols","rows","filterQue","sort","a","b","Create","changeTitle","changeDeadline","filterData","dateString","nowDate","success","getData","mustCheck","radioChecked","changeData","changeWord","changeCount","saveOptData","isMulti","_data","num","findIndex","_count","Group","index2","TextArea","saveWordData","Fill","nowData","filterSingleData","queData","changeQueData","optData","changeOptData","changeBool","arr1","arr2","i","FillQue","AddCount","FillOpt","submitAll","Canvas","x","y","x2","y2","beginPath","moveTo","lineTo","strokeStyle","stroke","fillText","fillStyle","fillRect","this","canvas","getElementById","ctx","getContext","width","height","drawLine","drawMarker","drawRect","Component","QueItem","selectOpt","Data","selectData","selectQue","Questionnaire","setItem","Content","path","component","exact","List","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.100fd79a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useEffect, useRef } from 'react';\r\n\r\nimport './Header.css';\r\nimport { Menu } from 'antd';\r\nconst listener = () => {\r\n    switch (window.location.hash) {\r\n        case '#/home': {\r\n            (document.getElementsByClassName('menuSelect')[0] as HTMLElement).click();\r\n        }\r\n            break;\r\n        case '#/create': {\r\n            (document.getElementsByClassName('menuSelect')[1] as HTMLElement).click();\r\n        }\r\n            break;\r\n        case '#/fill': {\r\n            (document.getElementsByClassName('menuSelect')[2] as HTMLElement).click();\r\n        }\r\n            break;\r\n        case '#/data': {\r\n            (document.getElementsByClassName('menuSelect')[3] as HTMLElement).click();\r\n        }\r\n            break;\r\n        case '#/list': {\r\n            (document.getElementsByClassName('menuSelect')[4] as HTMLElement).click();\r\n        }\r\n            break;\r\n    }\r\n}\r\nwindow.addEventListener('hashchange', listener);\r\n\r\nconst Header: React.FC = () => {\r\n    return (\r\n        <Menu mode='horizontal' className='headerMenu'>\r\n            <Menu.Item className='menuSelect' onClick={() => { window.location.hash = '/home' }}>首页</Menu.Item>\r\n            <Menu.Item className='menuSelect' onClick={() => { window.location.hash = '/create' }}>问卷新建</Menu.Item>\r\n            <Menu.Item className='menuSelect'>问卷填写</Menu.Item>\r\n            <Menu.Item className='menuSelect'>问卷数据</Menu.Item>\r\n            <Menu.Item className='menuSelect' onClick={() => { window.location.hash = '/list' }}>问卷列表</Menu.Item>\r\n        </Menu>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport './home.css';\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div className=\"home\">\r\n            <div className=\"passage\">\r\n                <h1>Welcome to visit here!</h1>\r\n                <p>it is a questionnaire manager</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport { List, Checkbox, Row, Col, Button } from 'antd';\r\n\r\n\r\ninterface iLiQue {\r\n    [name: string]: any;\r\n}\r\nconst LiQue = ({ id, state, name, editQue, scanData, fillQue, checked, changeChecked, list, changeList }: iLiQue) => {\r\n    return (\r\n        <Row data-id={id}>\r\n            <Col span={4}>\r\n                <Checkbox onChange={event => event.target.checked ? (changeChecked(checked + 1), changeList([...list, id])) :\r\n                    (changeChecked(checked - 1), changeList(list.filter((item: number) => item !== id)))}></Checkbox>\r\n            </Col>\r\n            <Col span={6}>{name}</Col>\r\n            <Col span={6}>{state}</Col>\r\n            <Col span={8}>\r\n                {state === 'ready' ? (\r\n                    <div>\r\n                        <Button onClick={editQue}>编辑</Button>\r\n                    </div>\r\n                ) : state === 'publish' ?\r\n                        (\r\n                            <div>\r\n                                <Button onClick={scanData}>数据</Button>\r\n                                <Button onClick={fillQue}>填写</Button>\r\n                            </div>\r\n                        ) : (\r\n                            <div>\r\n                                <Button onClick={scanData}>数据</Button>\r\n                            </div>\r\n                        )\r\n                }\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default LiQue;","import * as actionTypes from './actionTypes';\r\nimport * as actionTypesInCreate from '../create/actionTypes';\r\n\r\nexport const editQue = (id: number) => ({\r\n    type: actionTypesInCreate.ChangeQue,\r\n    id: id\r\n});\r\nexport const scanData = (id: number) => ({\r\n    type: actionTypesInCreate.ChangeQue,\r\n    id: id\r\n});\r\nexport const fillQue = (id: number) => ({\r\n    type: actionTypesInCreate.ChangeQue,\r\n    id: id\r\n});\r\n\r\n\r\nexport const newItem = () => ({\r\n    type: actionTypesInCreate.ChangeQue,\r\n    id: Date.parse(`${new Date()}`)\r\n});\r\nexport const removeItem = (id: number) => ({\r\n    type: actionTypesInCreate.RemoveItem,\r\n    id: id\r\n});\r\n\r\nexport const updateDate=(id:number,nowState:string)=>({\r\n    type:actionTypes.updateDataTime,\r\n    id:id,\r\n    nowState:nowState\r\n})","const AddQue = 'Que/Add';\r\nconst RemoveQue = 'Que/Remove';\r\nconst UpQue = 'Que/Up';\r\nconst DownQue = 'Que/Down';\r\nconst CopyQue = 'Que/Copy';\r\nconst SaveQue = 'Que/Save';\r\nconst SubmitQue = 'Que/Submit';\r\nconst DoneQue = 'Que/Done';\r\nconst ChangeQue = 'Que/Change';\r\nconst UpdateQue = 'Que/Update';\r\nconst UpdateWord = 'Que/UpdateWord';\r\n\r\nconst AddOpt = 'Opt/Add';\r\nconst UpOpt = 'Opt/Up';\r\nconst DownOpt = 'Opt/Down';\r\nconst RemoveOpt = 'Opt/Remove';\r\nconst RemoveAllOpt = 'Opt/AllRemove';\r\nconst UpdateOpt = 'Opt/Update';\r\nconst SubmitOpt = 'Opt/Submit';\r\n\r\nconst updateDataTime = 'Data/UpdateTime';\r\n\r\nexport const FillQue = 'Que/Fill';\r\nexport const FillOpt = 'Opt/Fill';\r\n\r\nexport const NewItem = 'Item/New';\r\nconst RemoveItem = 'Item/Remove';\r\n//const ScanItem = 'Item/Scan';\r\n//const FillItem = 'Item/Fill';\r\n\r\nexport const AddCount = 'DataCount/Add';\r\nexport const JustQueOrder = 'Que/JustOrder';\r\n\r\nexport {\r\n    UpdateWord, SubmitOpt, RemoveItem, UpdateQue\r\n    , UpdateOpt, ChangeQue, AddQue, RemoveQue\r\n    , UpQue, DownQue, CopyQue, AddOpt, UpOpt\r\n    , DownOpt, RemoveOpt, SaveQue, SubmitQue, DoneQue,\r\n    RemoveAllOpt, updateDataTime\r\n};","import React, { createContext, useReducer, Context, Reducer, ProviderProps, Props } from 'react';\r\nimport { CombineReducerProp } from './interface';\r\nimport { createReducerQue, createReducerOpt, createReducerQueId, createReducerData } from './create/reducer';\r\n\r\n//初始化store\r\nlet oldState: Storage = JSON.parse(localStorage.getItem('questionnaire-state')!);\r\nlet bool: boolean = false;\r\nfor (let item in oldState) {\r\n    if ((item !== 'data' && item !== 'que' && item !== 'opt') || !oldState[item]) bool = true;\r\n}\r\n//判断条件storage中存在state数据且里面没有空项 使用sotrage数据 否则使用初始数据\r\nconst initialState = bool ? JSON.parse(localStorage.getItem('questionnaire-state')!) : {\r\n    data: [\r\n        {\r\n            id: 1,\r\n            state: 'publish',\r\n            name: 'example',\r\n            //select: false,\r\n            deadline: '2020-12-31',\r\n            submit: 4,\r\n        }\r\n    ],\r\n    que: [\r\n        {\r\n            parId: 1,\r\n            order: 0,\r\n            type: 'single',\r\n            question: '',\r\n            must: true,\r\n            submitCount: 0,\r\n            answer: []\r\n        },\r\n        {\r\n            parId: 1,\r\n            order: 1,\r\n            type: 'word',\r\n            question: '',\r\n            must: true,\r\n            submitCount: 0,\r\n            answer: ['123', '222', '1', '']\r\n        }\r\n\r\n    ],\r\n    opt: [\r\n        {\r\n            parId: 1,\r\n            order: 0,\r\n            index: 0,\r\n            content: 'aaaaa',\r\n            count: 2\r\n        }, {\r\n            parId: 1,\r\n            order: 0,\r\n            index: 1,\r\n            content: 'aaa',\r\n            count: 2\r\n        }\r\n\r\n    ],\r\n    nowQueId: 0\r\n};\r\n\r\n//组合reducer\r\nlet reducers = combineReducers({\r\n    que: createReducerQue,\r\n    opt: createReducerOpt,\r\n    nowQueId: createReducerQueId,\r\n    data: createReducerData\r\n});\r\n\r\n//provider组件\r\nexport const totalContext: Context<any> = createContext({});\r\n\r\n//combineReducers函数\r\nexport function combineReducers(reducers: CombineReducerProp) {\r\n    return function (state: any = {}, action: { type: string, [name: string]: any }): Reducer<any, { type: string, [name: string]: any }> {\r\n        const newState: any = {};\r\n        Object.keys(reducers).forEach(key => {\r\n            const childState = state[key];\r\n            newState[key] = reducers[key](childState, action);\r\n        });\r\n        return newState;\r\n    }\r\n}\r\n\r\nexport const Providers = (props: Props<JSX.Element>) => {\r\n    const [state, dispatch] = useReducer(reducers, initialState);\r\n    return (\r\n        <totalContext.Provider value={{ state, dispatch }}>\r\n            {props.children}\r\n        </totalContext.Provider>\r\n    );\r\n};\r\n","import * as actionTypes from './actionTypes';\r\nimport * as actionTypesInList from '../list/actionTypes';\r\nimport { singleData, singleOpt, singleQue } from '../interface';\r\nimport { message } from 'antd';\r\ninterface reducerInCreate {\r\n    (state: Array<any>, action: { type: string, [name: string]: any }): any\r\n}\r\nconst createReducerQue: reducerInCreate = (state = [], action) => {\r\n    switch (action.type) {\r\n        case actionTypes.AddQue: {\r\n            let count = 0;\r\n            state.map((item) => {\r\n                if (item.parId === action.parentId) {\r\n                    count++;\r\n                };\r\n            });\r\n            if (count >= 10) {\r\n                message.error('问题最多十个');\r\n                return false;\r\n            }\r\n            return [\r\n                ...state,\r\n                {\r\n                    parId: action.parentId,\r\n                    order: count,\r\n                    type: action.queType,\r\n                    question: '',\r\n                    must: true,\r\n                    submitCount: 0,\r\n                    answer: ''\r\n                }\r\n            ];\r\n        }\r\n        case actionTypes.RemoveQue: {\r\n            return state.filter((item) => {\r\n                if (item.parId === action.parentId && item.order === action.index) {\r\n                    return false;\r\n                } else {\r\n                    return true;\r\n                }\r\n            });\r\n        }\r\n        case actionTypes.UpQue: {\r\n            //先把目标问题取出 然后插入过滤掉该问题的新数组\r\n            let arr = JSON.parse(JSON.stringify(state));\r\n            let obj: any = {}, obj2: any = {};\r\n            if (action.index === 0) {\r\n                console.log('上面没了');\r\n                return arr;\r\n            }\r\n            arr.forEach((item: singleQue, index: number) => {\r\n                if (item.parId === action.parentId && item.order === action.index) {\r\n                    obj = arr[index];\r\n                }\r\n                if (item.parId === action.parentId && item.order === action.index! - 1) {\r\n                    obj2 = arr[index];\r\n                }\r\n            });\r\n            obj.order--;\r\n            obj2.order++;\r\n            arr.forEach((item: singleQue) => {\r\n                if (item.parId === action.parentId && item.order === action.index) {\r\n                    item = obj;\r\n                }\r\n            });\r\n            arr.forEach((item: singleQue) => {\r\n                if (item.parId === action.parentId && item.order === action.index! - 1) {\r\n                    item = obj2;\r\n                }\r\n            });\r\n            return arr;\r\n        }\r\n        case actionTypes.DownQue: {\r\n            let arr = JSON.parse(JSON.stringify(state));\r\n            let obj: any = {}, obj2: any = {};\r\n            if (action.index === arr.length - 1) {\r\n                console.log('下面没了');\r\n                return arr;\r\n            }\r\n            arr.forEach((item: singleQue, index: number) => {\r\n                if (item.parId === action.parentId && item.order === action.index) {\r\n                    obj = arr[index];\r\n                }\r\n                if (item.parId === action.parentId && item.order === action.index! + 1) {\r\n                    obj2 = arr[index];\r\n                }\r\n            });\r\n            obj.order++;\r\n            obj2.order--;\r\n            arr.forEach((item: singleQue) => {\r\n                if (item.parId === action.parentId && item.order === action.index) {\r\n                    item = obj;\r\n                }\r\n            });\r\n            arr.forEach((item: singleQue) => {\r\n                if (item.parId === action.parentId && item.order === action.index! + 1) {\r\n                    item = obj2;\r\n                }\r\n            });\r\n            return arr;\r\n        }\r\n        case actionTypes.CopyQue: {\r\n            let arr = JSON.parse(JSON.stringify(state));\r\n            let obj: any = {};\r\n            if (arr.length === 10) {\r\n                console.log('问题最多十个');\r\n                return arr;\r\n            }\r\n            arr.forEach((item: singleQue) => {\r\n                if (item.parId === action.parentId && item.order === action.index) {\r\n                    obj = item;\r\n                }\r\n            });\r\n            obj.order = arr.length;\r\n            arr.push(obj);\r\n            return arr;\r\n        }\r\n        case actionTypes.UpdateQue: {\r\n            return state.map((item) => {\r\n                if (item.parId === action.id && item.order === action.index) {\r\n                    return { ...item, question: action.content };\r\n                } else {\r\n                    return item;\r\n                }\r\n            });\r\n        }\r\n        case actionTypes.UpdateWord: {\r\n            return state.map((item) => {\r\n                if (item.parId === action.id && item.order === action.index) {\r\n                    return { ...item, answer: action.answer };\r\n                } else {\r\n                    return item;\r\n                }\r\n            });\r\n        }\r\n        case actionTypes.FillQue: {\r\n            return state.map((item) => {\r\n                if (item.parId === action.id && item.order === action.index) {\r\n                    return { ...item, answer: [...item.answer!, action.answer] };\r\n                } else {\r\n                    return item;\r\n                }\r\n            })\r\n        }\r\n        case actionTypes.JustQueOrder: {\r\n            return state.map((item) => {\r\n                if (item.parId === action.id && item.order! > action.index!) {\r\n                    return { ...item, order: item.order! - 1 };\r\n                }\r\n                return item;\r\n            });\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst createReducerOpt: reducerInCreate = (state = [], action) => {\r\n    switch (action.type) {\r\n        case actionTypes.AddOpt: {\r\n            let index = 0;\r\n            state.forEach((item) => {\r\n                if (item.parId === action.parentId && item.order === action.parIndex) {\r\n                    index++;\r\n                }\r\n            })\r\n            if (index === 4) {\r\n                message.error('选项已满');\r\n                return state;\r\n            };\r\n            return [\r\n                ...state,\r\n                {\r\n                    parId: action.parentId,\r\n                    order: action.parIndex,\r\n                    index: index,\r\n                    content: '',\r\n                    answer: ''\r\n                }\r\n            ]\r\n        }\r\n        case actionTypes.RemoveOpt: {\r\n            let arr = state.filter((item) => {\r\n                if (item.parId === action.parentId && item.order === action.parIndex) {\r\n                    return item.index !== action.index;\r\n                } else {\r\n                    return true;\r\n                }\r\n            });\r\n            arr.forEach((item) => {\r\n                if (item.parId === action.parentId && item.order === action.parIndex) {\r\n                    if (item.index >= action.index!) item.index--;\r\n                }\r\n            })\r\n            return arr;\r\n        }\r\n        case actionTypes.RemoveAllOpt: {\r\n            let arr = state.filter((item) => {\r\n                if (item.parId === action.parentId && item.order === action.parIndex) {\r\n                    return false;\r\n                } else {\r\n                    return true;\r\n                }\r\n            });\r\n            return arr;\r\n        }\r\n        case actionTypes.UpOpt: {\r\n            let obj: any = [], obj2: any = [];\r\n            let arr = state.filter((item: singleOpt) => {\r\n                if (item.parId === action.parentId && item.order === action.parIndex) {\r\n                    obj.push(item);\r\n                    return false;\r\n                } else if (item.parId === action.parentId && item.order === action.parIndex! - 1) {\r\n                    obj2.push(item)\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n            obj.forEach((item: singleOpt) => {\r\n                item.order--;\r\n            });\r\n            obj2.forEach((item: singleOpt) => {\r\n                item.order++;\r\n            })\r\n            arr.push(...obj, ...obj2);\r\n            return arr;\r\n        }\r\n        case actionTypes.DownOpt: {\r\n            let obj: any = [], obj2: any = [];\r\n            let arr = state.filter((item) => {\r\n                if (item.parId === action.parentId && item.order === action.parIndex) {\r\n                    obj.push(item);\r\n                    return false;\r\n                } else if (item.parId === action.parentId && item.order === action.parIndex! + 1) {\r\n                    obj2.push(item)\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n            obj.forEach((item: singleOpt) => {\r\n                item.order++;\r\n            });\r\n            obj2.forEach((item: singleOpt) => {\r\n                item.order--;\r\n            })\r\n            arr.push(...obj, ...obj2);\r\n            return arr;\r\n        }\r\n        case actionTypes.UpdateOpt: {\r\n            return state.map((item) => {\r\n                if (item.parId === action.parentId && item.order === action.parIndex && item.index === action.index) {\r\n                    return { ...item, content: action.content };\r\n                } else {\r\n                    return item;\r\n                }\r\n            });\r\n        }\r\n        case actionTypes.SubmitOpt: {\r\n            return state.map((item) => {\r\n                if (item.parId === action.parentId && item.order === action.parIndex && item.index === action.index) {\r\n                    if (item.count + action.number! < 0) {\r\n                        return item;\r\n                    } else {\r\n                        return { ...item, count: item.count + action.number! };\r\n                    }\r\n                } else {\r\n                    return item;\r\n                }\r\n            });\r\n        }\r\n        case actionTypes.FillOpt: {\r\n            return state.map((item) => {\r\n                if (item.parId === action.id && item.order === action.order && item.index === action.index) {\r\n                    return { ...item, count: item.count + action.count! };\r\n                } else {\r\n                    return item;\r\n                }\r\n            });\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nconst createReducerData: reducerInCreate = (state = [], action) => {\r\n    switch (action.type) {\r\n        case actionTypes.SaveQue:\r\n            return state.map((item) => {\r\n                return item.id === action.id ? { ...item, state: 'ready' } : item;\r\n            });\r\n        case actionTypes.SubmitQue:\r\n            return state.map((item) => {\r\n                return item.id === action.id ? { ...item, state: 'publish' } : item;\r\n            });\r\n        case actionTypes.RemoveItem:\r\n            return state.filter((item) => {\r\n                return item.id !== action.id;\r\n            });\r\n        case actionTypes.NewItem:\r\n            if (state.find((item) => item.id === action.id)) {\r\n                return state;\r\n            }\r\n            return [\r\n                ...state,\r\n                {\r\n                    id: action.id,\r\n                    state: 'done',\r\n                    name: action.title,\r\n                    deadline: action.deadline,\r\n                    submit: 0\r\n                }\r\n            ];\r\n        case actionTypes.updateDataTime:\r\n            return state.map(item => {\r\n                return item.id === action.id ? { ...item, state: action.nowState } : item;\r\n            });\r\n        case actionTypes.AddCount:\r\n            return state.map((item) => {\r\n                return item.id === action.id ? { ...item, submit: item.submit! + 1 } : item;\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst createReducerQueId: reducerInCreate = (state = [], action) => {\r\n    switch (action.type) {\r\n        case actionTypes.ChangeQue:\r\n            return action.id;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport { createReducerQue, createReducerOpt, createReducerQueId, createReducerData };","import React, { Component, ChangeEvent, useContext, useState, useEffect } from 'react';\r\nimport LiQue from './liQue';\r\nimport './list.css';\r\nimport { editQue, scanData, fillQue, newItem, removeItem, updateDate } from '../action';\r\nimport { List, Row, Col, Checkbox, Button, message } from 'antd';\r\nimport { totalContext } from '../../Store';\r\nimport { singleData, CheckDate } from '../../interface';\r\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox';\r\n\r\n\r\nconst Lists = ({ }) => {\r\n    const { state, dispatch } = useContext(totalContext);\r\n    const [checked, changeChecked] = useState(0);\r\n    const [list, changeList] = useState([]);\r\n    const data = state.data;\r\n    const checkDate: CheckDate = (date) => {\r\n        const nowDate = new Date().getTime();\r\n        if (nowDate <= Date.parse(date)) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        data.forEach((item: singleData) => {\r\n            if (!checkDate(item.deadline) && item.state !== 'done') {//此处条件注意要判断item.state是否已经是done 否则将会无限触发dispatch爆栈\r\n                dispatch(updateDate(item.id, 'done'));\r\n            }\r\n        });\r\n    })\r\n    return (\r\n        <section className=\"list\">\r\n            <h1>问卷列表</h1>\r\n            <List\r\n                itemLayout='vertical'\r\n                dataSource={data}\r\n                header={\r\n                    <Row>\r\n                        <Col span={4}>选中</Col>\r\n                        <Col span={6}>问卷名称</Col>\r\n                        <Col span={6}>问卷状态</Col>\r\n                        <Col span={8}>功能区域</Col>\r\n                    </Row>\r\n                }\r\n                footer={\r\n                    <Row>\r\n                        <Col span={4}>\r\n                            <Checkbox indeterminate={!!checked && checked < data.length} checked={data.length === checked} onChange={(event: CheckboxChangeEvent) => {\r\n                                message.warn('功能未添加');\r\n                            }}>all</Checkbox>\r\n                        </Col>\r\n                        <Col span={6}></Col>\r\n                        <Col span={6}></Col>\r\n                        <Col span={8}>\r\n                            <Button onClick={() => {\r\n                                list.forEach((item: number) => dispatch(removeItem(item)));\r\n                                changeChecked(checked - list.length);\r\n                            }}>删除</Button>\r\n                            <Button onClick={() => {\r\n                                dispatch(newItem());\r\n                                window.location.hash = '/create';\r\n                            }}>新建</Button>\r\n                        </Col>\r\n                    </Row>\r\n                }\r\n                renderItem={(item: singleData) => (\r\n                    <List.Item>\r\n                        <LiQue\r\n                            key={item.id}\r\n                            id={item.id}\r\n                            state={item.state}\r\n                            name={item.name}\r\n                            editQue={() => {\r\n                                dispatch(editQue(item.id));\r\n                                window.location.hash = '/create';\r\n                            }}\r\n                            scanData={() => {\r\n                                dispatch(scanData(item.id));\r\n                                window.location.hash = '/data';\r\n                            }}\r\n                            fillQue={() => {\r\n                                dispatch(fillQue(item.id));\r\n                                window.location.hash = '/fill';\r\n                            }}\r\n                            checked={checked}\r\n                            changeChecked={changeChecked}\r\n                            list={list}\r\n                            changeList={changeList}\r\n                        ></LiQue>\r\n                    </List.Item>\r\n                )}\r\n            >\r\n            </List>\r\n        </section>\r\n    )\r\n}\r\n\r\n/*\r\nconst mapStateToProps = (state: state) => {\r\n    return {\r\n        data: state.data as dataState\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        editQue: (id: number) => {\r\n            dispatch(editQue(id));\r\n            window.location.hash = '/create';\r\n        },\r\n        scanData: (id: number) => {\r\n            dispatch(scanData(id));\r\n            window.location.hash = '/data';\r\n        },\r\n        fillQue: (id: number) => {\r\n            dispatch(fillQue(id));\r\n            window.location.hash = '/fill';\r\n        },\r\n        newItem: () => {\r\n            dispatch(newItem());\r\n            window.location.hash = '/create';\r\n        },\r\n        removeItem: (id: number) => {\r\n            dispatch(removeItem(id));\r\n        }\r\n    }\r\n}\r\n*/\r\nexport default Lists;","const NewItem = 'Item/New';\r\nconst RemoveItem = 'Item/Remove';\r\n\r\nconst EditItem = 'Item/Edit';\r\nconst ScanItem = 'Item/Scan';\r\nconst FillItem = 'Item/Fill';\r\n\r\nconst updateDataTime = 'Data/UpdateTime';\r\n\r\nexport { NewItem, RemoveItem, EditItem, ScanItem, FillItem, updateDataTime };","import React, { JSXElementConstructor } from 'react';\r\nimport * as actionTypes from '../actionTypes';\r\nimport { updateOpt } from '../action';\r\nimport { Input, Radio, Button, Checkbox } from 'antd';\r\nimport { OptProps } from '../../interface';\r\n\r\nconst Option: React.SFC<OptProps> = ({ index, removeOpt, type, updateOpt, content }) => {\r\n    switch (type) {\r\n        case 'single':\r\n            return (\r\n                <div>\r\n                    <Radio value={index}>\r\n                        <Input placeholder='选项内容' defaultValue={content} onChange={updateOpt}></Input>\r\n                        <Button onClick={removeOpt}>X</Button>\r\n                    </Radio>\r\n                </div>\r\n            )\r\n        case 'multi':\r\n            return (\r\n                <div className='checkbox'>\r\n                    <Checkbox></Checkbox>\r\n                    <Input placeholder='选项内容' className='checkboxInput' defaultValue={content} onChange={updateOpt}></Input>\r\n                    <Button onClick={removeOpt}>X</Button>\r\n                </div>\r\n            )\r\n        default:\r\n            return (\r\n                <div></div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default Option;","import * as actionTypes from './actionTypes';\r\n\r\nexport const addQue = (type: String, parentId: Number) => ({\r\n    type: actionTypes.AddQue,\r\n    queType: type,\r\n    parentId: parentId\r\n});\r\nexport const removeQue = (index: Number, parentId: Number) => ({\r\n    type: actionTypes.RemoveQue,\r\n    index: index,\r\n    parentId: parentId\r\n});\r\nexport const upQue = (index: Number, parentId: Number) => ({\r\n    type: actionTypes.UpQue,\r\n    index: index,\r\n    parentId: parentId\r\n});\r\nexport const downQue = (index: Number, parentId: Number) => ({\r\n    type: actionTypes.DownQue,\r\n    index: index,\r\n    parentId: parentId\r\n});\r\nexport const copyQue = (index: Number, parentId: Number) => ({\r\n    type: actionTypes.CopyQue,\r\n    index: index,\r\n    parentId: parentId\r\n});\r\n\r\n\r\nexport const addOpt = (parIndex: Number, parentId: Number) => ({\r\n    type: actionTypes.AddOpt,\r\n    parIndex: parIndex,\r\n    parentId: parentId\r\n});\r\nexport const upOpt = (parIndex: Number, parentId: Number) => ({\r\n    type: actionTypes.UpOpt,\r\n    parIndex: parIndex,\r\n    parentId: parentId\r\n});\r\nexport const downOpt = (parIndex: Number, parentId: Number) => ({\r\n    type: actionTypes.DownOpt,\r\n    parIndex: parIndex,\r\n    parentId: parentId\r\n});\r\nexport const removeOpt = (parIndex: Number, parentId: Number, index: Number) => ({\r\n    type: actionTypes.RemoveOpt,\r\n    parIndex: parIndex,\r\n    parentId: parentId,\r\n    index: index\r\n});\r\n/**/\r\nexport const removeAllOpt=(parIndex: Number, parentId: Number)=>({\r\n    type:actionTypes.RemoveAllOpt,\r\n    parIndex:parIndex,\r\n    parentId:parentId\r\n})\r\nexport const updateOpt = (parIndex: Number, parentId: Number, index: Number, content: string) => ({\r\n    type: actionTypes.UpdateOpt,\r\n    parIndex: parIndex,\r\n    parentId: parentId,\r\n    index: index,\r\n    content: content\r\n})\r\n\r\n\r\nexport const saveQue = (id: number) => ({\r\n    type: actionTypes.SaveQue,\r\n    id: id\r\n});\r\nexport const submitQue = (id: number) => ({\r\n    type: actionTypes.SubmitQue,\r\n    id: id\r\n});\r\nexport const doneQue = (id: number) => ({\r\n    type: actionTypes.DoneQue,\r\n    id: id\r\n});\r\nexport const clearQue = () => ({\r\n    type: actionTypes.ChangeQue,\r\n    id: 0\r\n});\r\nexport const updateQue = (id: number, index: number, content: string) => ({\r\n    type: actionTypes.UpdateQue,\r\n    id: id,\r\n    index: index,\r\n    content: content\r\n});\r\n\r\nexport const createItem = (id: number, title: string, deadline: string) => ({\r\n    type: actionTypes.NewItem,\r\n    id: id,\r\n    title: title,\r\n    deadline: deadline\r\n});\r\n\r\nexport const justOrder = (index: Number, parentId: Number) => ({\r\n    type: actionTypes.JustQueOrder,\r\n    index: index,\r\n    id: parentId\r\n});","import React from 'react';\r\nimport { Button, message } from 'antd';\r\nimport { ControllerProps } from '../../interface';\r\n\r\n//bool用于分辨选择题和文字题 文字题没有选项\r\nconst Controller: React.SFC<ControllerProps> = ({ bool, addOpt, removeQue, upQue, downQue, copyQue }) => {\r\n    return (\r\n        <div className='controller'>\r\n            {bool ? <Button onClick={addOpt}>添加选项</Button> : null}\r\n            <Button onClick={()=>message.warn('功能未添加')}>题目上移</Button>\r\n            <Button onClick={()=>message.warn('功能未添加')}>题目下移</Button>\r\n            <Button onClick={()=>message.warn('功能未添加')}>题目复用</Button>\r\n            <Button onClick={removeQue}>题目删除</Button>\r\n        </div>\r\n    )\r\n}\r\nexport default Controller;","import React, { Component, ChangeEvent, useContext } from 'react';\r\nimport Option from './option';\r\nimport { removeOpt, addOpt, upOpt, downOpt, updateOpt, addQue, removeQue, upQue, downQue, copyQue, updateQue, removeAllOpt } from '../action';\r\nimport { Input, Checkbox } from 'antd';\r\nimport TextArea from 'antd/lib/input/TextArea';\r\nimport Controller from './controller';\r\nimport { totalContext } from '../../Store';\r\nimport { FilterState, singleOpt, QueProps } from '../../interface';\r\n\r\n/*\r\n<li data-id='single'>\r\n            <p>Q{this.props.index + 1}单选题</p>\r\n            <Input type=\"text\" placeholder=\"题目内容\" defaultValue={this.props.item.question} onChange={this.props.updateQue} />\r\n            {filterState(this.props.opt, this.props.parId, this.props.index).map((item: opt1, index: number) => {\r\n                return (\r\n                    <Option\r\n                        key={this.props.parId + '-' + this.props.index + '-' + index}\r\n                        type={this.props.type}\r\n                        content={item.content}\r\n                        removeOpt={() => this.props.removeOpt(this.props.index, this.props.parId, index)}\r\n                        updateOpt={this.updateOpt(this.props.index, this.props.parId, index, this.props.updateOpt)}\r\n                    />\r\n                )\r\n            })}\r\n            <Controller></Controller>\r\n            <div data-id=\"addOpt\" className='addOpt' onClick={() => this.props.addOpt(this.props.index, this.props.parId)}>Add Option</div>\r\n            <div className=\"create-controller\">\r\n                <span className=\"controller-up\" onClick={() => {\r\n                    this.props.upQue(this.props.index, this.props.parId)\r\n                    this.props.upOpt(this.props.index, this.props.parId)\r\n                }}>上移</span>\r\n                <span className=\"controller-down\" onClick={() => {\r\n                    this.props.downQue(this.props.index, this.props.parId)\r\n                    this.props.downOpt(this.props.index, this.props.parId)\r\n                }}>下移</span>\r\n                <span className=\"controller-copy\" onClick={() => this.props.copyQue(this.props.index, this.props.parId)}>复用</span>\r\n                <span className=\"controller-delete\" onClick={() => this.props.removeQue(this.props.index, this.props.parId)}>删除</span>\r\n            </div>\r\n        </li>\r\n        <li data-id='multi'>\r\n            <p>Q{this.props.index + 1}多选题</p>\r\n            <Input type=\"text\" placeholder=\"题目内容\" defaultValue={this.props.item.question} onChange={this.props.updateQue} />\r\n            {filterState(this.props.opt, this.props.parId, this.props.index).map((item: opt1, index: number) => {\r\n                return (\r\n                    <Option\r\n                        key={this.props.parId + '-' + this.props.index + '-' + index}\r\n                        type={this.props.type}\r\n                        content={item.content}\r\n                        removeOpt={() => this.props.removeOpt(this.props.index, this.props.parId, index)}\r\n                        updateOpt={this.updateOpt(this.props.index, this.props.parId, index, this.props.updateOpt)}\r\n                    />\r\n                )\r\n            })}\r\n            <div data-id=\"addOpt\" className='addOpt' onClick={() => this.props.addOpt(this.props.index, this.props.parId)}>Add Option</div>\r\n            <div className=\"create-controller\">\r\n                <span className=\"controller-up\" onClick={() => {\r\n                    this.props.upQue(this.props.index, this.props.parId)\r\n                    this.props.upOpt(this.props.index, this.props.parId)\r\n                }}>上移</span>\r\n                <span className=\"controller-down\" onClick={() => {\r\n                    this.props.downQue(this.props.index, this.props.parId)\r\n                    this.props.downOpt(this.props.index, this.props.parId)\r\n                }}>下移</span>\r\n                <span className=\"controller-copy\" onClick={() => this.props.copyQue(this.props.index, this.props.parId)}>复用</span>\r\n                <span className=\"controller-delete\" onClick={() => this.props.removeQue(this.props.index, this.props.parId)}>删除</span>\r\n            </div>\r\n        </li>\r\n        <li data-id='word'>\r\n            <p>Q{this.props.index + 1}文字题</p>\r\n            <Input type=\"text\" placeholder=\"题目内容\" defaultValue={this.props.item.question} onChange={this.props.updateQue} />\r\n            <TextArea name=\"\" id=\"\" cols={30} rows={10} placeholder=\"回答内容\"></TextArea>\r\n            <span>\r\n                <p><input type=\"checkbox\" />此项必填</p>\r\n            </span>\r\n            <div className=\"create-controller\">\r\n                <span className=\"controller-up\" onClick={() => {\r\n                    this.props.upQue(this.props.index, this.props.parId)\r\n                    this.props.upOpt(this.props.index, this.props.parId)\r\n                }}>上移</span>\r\n                <span className=\"controller-down\" onClick={() => {\r\n                    this.props.downQue(this.props.index, this.props.parId)\r\n                    this.props.downOpt(this.props.index, this.props.parId)\r\n                }}>下移</span>\r\n                <span className=\"controller-copy\" onClick={() => this.props.copyQue(this.props.index, this.props.parId)}>复用</span>\r\n                <span className=\"controller-delete\" onClick={() => this.props.removeQue(this.props.index, this.props.parId)}>删除</span>\r\n            </div>\r\n        </li>\r\n*/\r\nconst filterState: FilterState = (opt, id, index) => {\r\n    var arr = opt.filter((item: singleOpt) => {\r\n        if (item.parId === id && item.order === index) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    });\r\n    return arr;\r\n}\r\n\r\nconst Que: React.FC<QueProps> = ({ index, item }) => {\r\n    const { state, dispatch } = useContext(totalContext);\r\n    const { opt } = state;\r\n\r\n    switch (item.type) {\r\n        case 'single':\r\n            return (\r\n                <div data-id='single' className='que'>\r\n                    <p>Q{index + 1}单选题</p>\r\n                    <Input type=\"text\" placeholder=\"题目内容\" defaultValue={item.question} onChange={(event: React.ChangeEvent) => dispatch(updateQue(item.parId, index, (event.target as HTMLInputElement).value))} />\r\n                    {filterState(opt, item.parId, index).map((optItem, optIndex: number) => {\r\n                        return (\r\n                            <Option\r\n                                index={optIndex}\r\n                                key={optItem.parId+optIndex}\r\n                                type={item.type}\r\n                                content={optItem.content}\r\n                                removeOpt={() => dispatch(removeOpt(optItem.order, optItem.parId, optIndex))}\r\n                                updateOpt={(event: React.ChangeEvent) => dispatch(updateOpt(index, item.parId, optIndex, (event.target as HTMLInputElement).value))}\r\n                            />\r\n                        )\r\n                    })}\r\n                    <Controller\r\n                        bool={true}\r\n                        addOpt={() => dispatch(addOpt(index, item.parId))}\r\n                        removeQue={() => {\r\n                            dispatch(removeQue(index, item.parId));\r\n                            dispatch(removeAllOpt(index, item.parId));\r\n                        }}\r\n                        upQue={() => dispatch(upQue(index, item.parId))}\r\n                        downQue={() => dispatch(downQue(index, item.parId))}\r\n                        copyQue={() => dispatch(copyQue(index, item.parId))}\r\n                    />\r\n                </div>\r\n            )\r\n        case 'multi':\r\n            return (\r\n                <div data-id='multi' className='que'>\r\n                    <p>Q{index + 1}多选题</p>\r\n                    <Input type=\"text\" placeholder=\"题目内容\" defaultValue={item.question} onChange={(event: React.ChangeEvent) => dispatch(updateQue(item.parId, index, (event.target as HTMLInputElement).value))} />\r\n                    {filterState(opt, item.parId, index).map((optItem, optIndex: number) => {\r\n                        return (\r\n                            <Option\r\n                                index={optIndex}\r\n                                key={optItem.parId+optIndex}\r\n                                type={item.type}\r\n                                content={optItem.content}\r\n                                removeOpt={() => dispatch(removeOpt(optItem.order, optItem.parId, optIndex))}\r\n                                updateOpt={(event: React.ChangeEvent) => dispatch(updateOpt(index, item.parId, optIndex, (event.target as HTMLInputElement).value))}\r\n                            />\r\n                        )\r\n                    })}\r\n                    <Controller\r\n                        bool={true}\r\n                        addOpt={() => dispatch(addOpt(index, item.parId))}\r\n                        removeQue={() => {\r\n                            dispatch(removeQue(index, item.parId));\r\n                            dispatch(removeAllOpt(index, item.parId));\r\n                        }}\r\n                        upQue={() => dispatch(upQue(index, item.parId))}\r\n                        downQue={() => dispatch(downQue(index, item.parId))}\r\n                        copyQue={() => dispatch(copyQue(index, item.parId))}\r\n                    />\r\n                </div>\r\n            )\r\n        case 'word':\r\n            return (\r\n                <div data-id='word' className='que'>\r\n                    <p>Q{index + 1}文字题</p>\r\n                    <Input type=\"text\" placeholder=\"题目内容\" defaultValue={item.question} onChange={(event: React.ChangeEvent) => dispatch(updateQue(item.parId, index, (event.target as HTMLInputElement).value))} />\r\n                    <TextArea name=\"\" id=\"\" cols={30} rows={10} placeholder=\"回答内容\"></TextArea>\r\n                    <Controller\r\n                        bool={false}\r\n                        addOpt={() => dispatch(addOpt(index, item.parId))}\r\n                        removeQue={() => dispatch(removeQue(index, item.parId))}\r\n                        upQue={() => dispatch(upQue(index, item.parId))}\r\n                        downQue={() => dispatch(downQue(index, item.parId))}\r\n                        copyQue={() => dispatch(copyQue(index, item.parId))}\r\n                    />\r\n                </div>\r\n            )\r\n        default:\r\n            return (\r\n                <div></div>\r\n            )\r\n    }\r\n}\r\n\r\n/*\r\nconst mapStateToProps = (state: state) => {\r\n    return {\r\n        opt: state.opt,\r\n        que: state.que\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        removeOpt: (parIndex: number, parentId: number, index: number) => {\r\n            dispatch(removeOpt(parIndex, parentId, index));\r\n        },\r\n        addOpt: (parIndex: number, parentId: number) => {\r\n            dispatch(addOpt(parIndex, parentId))\r\n        },\r\n        upOpt: (parIndex: number, parentId: number) => {\r\n            dispatch(upOpt(parIndex, parentId))\r\n        },\r\n        downOpt: (parIndex: number, parentId: number) => {\r\n            dispatch(downOpt(parIndex, parentId))\r\n        },\r\n        updateOpt: (parIndex: number, parentId: number, index: number, content: string) => {\r\n            dispatch(updateOpt(parIndex, parentId, index, content))\r\n        }\r\n    }\r\n}\r\n*/\r\nexport default Que;","import React, { ChangeEvent, useState, useContext, useEffect } from 'react';\r\nimport './create.css';\r\nimport Que from './que';\r\nimport { List, Button, Input, Calendar, DatePicker, message } from 'antd';\r\nimport { totalContext } from '../../Store';\r\nimport { newItem } from '../../list/action';\r\nimport { singleQue, arrayData, singleData, arrayQue, FilterQue, FilterData } from '../../interface';\r\nimport { addQue, saveQue, clearQue, submitQue, createItem } from '../action';\r\n\r\n\r\nconst filterQue: FilterQue = (que, id) => {\r\n    let arr: arrayQue = [];\r\n    que.forEach((item: singleQue) => {\r\n        if (id !== null && item.parId === id) {\r\n            arr.push(item);\r\n        }\r\n    });\r\n    arr.sort((a: singleQue, b: singleQue) => {\r\n        return a.order - b.order;\r\n    })\r\n    return arr;\r\n}\r\nconst filterData: FilterData = (data, id) => {\r\n    let bool: boolean = true;\r\n    data.forEach((item: singleData) => {\r\n        if (id !== null && item.id === id) {\r\n            bool = item.state === 'ready' ? true : false;\r\n        }\r\n    });\r\n    return bool;\r\n}\r\n\r\nconst Create = ({ }) => {\r\n    const { state, dispatch } = useContext(totalContext);\r\n    const { data, que, nowQueId } = state;\r\n    let [title, changeTitle] = useState('');\r\n    let [deadline, changeDeadline] = useState('');\r\n    if (nowQueId === 0 || !filterData(data, nowQueId)) {\r\n        return (\r\n            <div className='create1'>\r\n                <div className='create1-1'>\r\n                    <p>点击按钮新建问卷</p>\r\n                    <Button onClick={() => dispatch(newItem())}>新建问卷</Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div className=\"create2\">\r\n            <div className=\"create2-1\">\r\n                <div className=\"create-title\"><Input type=\"text\" placeholder=\"问卷标题\" onChange={(event: React.ChangeEvent) => changeTitle((event.target as HTMLInputElement).value)} /></div>\r\n                <div className=\"queAll\">\r\n                    <List\r\n                        itemLayout='vertical'\r\n                        dataSource={filterQue(que, nowQueId)}\r\n                        renderItem={(item: singleQue, index: number) => (\r\n                            <List.Item>\r\n                                <Que\r\n                                    key={item.parId}\r\n                                    index={index}\r\n                                    item={item}\r\n                                />\r\n                            </List.Item>\r\n                        )}\r\n                    ></List>\r\n                </div>\r\n                <div className=\"create-add\">\r\n                    <Button onClick={() => dispatch(addQue('single', nowQueId))}>单选题</Button>\r\n                    <Button onClick={() => dispatch(addQue('multi', nowQueId))}>多选题</Button>\r\n                    <Button onClick={() => dispatch(addQue('word', nowQueId))}>文字题</Button>\r\n                </div>\r\n                <div className=\"create-foot\">\r\n                    <p>问卷截止时间：<DatePicker onChange={(date, dateString) => changeDeadline(dateString)}></DatePicker></p>\r\n                    <Button onClick={() => {\r\n                        const nowDate = new Date().getTime();\r\n                        if (!deadline) {\r\n                            message.error('必填项空缺');\r\n                        } else if (nowDate < Date.parse(deadline)) {\r\n                            dispatch(createItem(nowQueId, title, deadline));\r\n                            dispatch(saveQue(nowQueId));\r\n                            window.location.hash = '/list';\r\n                            dispatch(clearQue());\r\n                            message.success('保存成功');\r\n                        } else {\r\n                            message.error('截止时间小于当前时间');\r\n                        }\r\n                    }}>保存问卷</Button>\r\n                    <Button onClick={() => {\r\n                        const nowDate = new Date().getTime();\r\n                        if (!deadline) {\r\n                            message.error('必填项空缺');\r\n                        } else if (nowDate < Date.parse(deadline)) {\r\n                            dispatch(createItem(nowQueId, title, deadline));\r\n                            dispatch(submitQue(nowQueId));\r\n                            window.location.hash = '/list';\r\n                            dispatch(clearQue());\r\n                            message.success('保存成功');\r\n                        } else {\r\n                            message.error('截止时间小于当前时间');\r\n                        }\r\n                    }\r\n                    }>发布问卷</Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n/*\r\nconst mapStateToProps = (state: state) => {\r\n    return {\r\n        que: state.que as [],\r\n        nowQueId: state.nowQueId as number\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addQue: (type: String, parentId: Number) => {\r\n            dispatch(addQue(type, parentId))\r\n        },\r\n        removeQue: (index: Number, parentId: Number) => {\r\n            dispatch(removeQue(index, parentId));\r\n            //移除index后还得把后面的index全部减一 防止混乱\r\n            dispatch(justOrder(index, parentId));\r\n        },\r\n        upQue: (index: Number, parentId: Number) => {\r\n            dispatch(upQue(index, parentId))\r\n        },\r\n        downQue: (index: Number, parentId: Number) => {\r\n            dispatch(downQue(index, parentId))\r\n        },\r\n        copyQue: (index: Number, parentId: Number) => {\r\n            dispatch(copyQue(index, parentId))\r\n        },\r\n        saveQue: (id: number, title: string, deadline: string) => {\r\n            dispatch(createItem(id, title, deadline))\r\n            dispatch(saveQue(id));\r\n        },\r\n        submitQue: (id: number, title: string, deadline: string) => {\r\n            dispatch(createItem(id, title, deadline))\r\n            dispatch(submitQue(id))\r\n        },\r\n        clearQue: () => {\r\n            dispatch(clearQue())\r\n        },\r\n        updateQue: (id: number, index: number, content: string) => {\r\n            dispatch(updateQue(id, index, content))\r\n        },\r\n        newItem: () => {\r\n            dispatch(newItem());\r\n        }\r\n    }\r\n}\r\n*/\r\n\r\nexport default Create;","import React, { Component, ChangeEvent, useContext, useState } from 'react';\r\nimport { ChangeOpt, UpdateWord } from '../action';\r\nimport { singleOpt, singleQue } from '../../interface';\r\nimport { totalContext } from '../../Store';\r\nimport { Input, Checkbox } from 'antd';\r\nimport Radio, { RadioChangeEvent } from 'antd/lib/radio';\r\n\r\nconst Que: React.SFC<any> = ({ item, getData, index, mustCheck }) => {\r\n    const { state, dispatch } = useContext(totalContext);\r\n    const { opt } = state;\r\n    const [radioChecked, changeChecked] = useState(0);\r\n\r\n    const [data, changeData] = useState([]);\r\n    const [word, changeWord] = useState([] as any);\r\n    const [count, changeCount] = useState([]);\r\n\r\n    const saveOptData = (parIndex: Number, parentId: Number, queType: string, isMulti: boolean) => {\r\n        if (queType === 'publish') {\r\n            return function (event?: RadioChangeEvent) {\r\n                let obj = {\r\n                    parId: parentId,\r\n                    order: parIndex,\r\n                    index: +(event?.target as HTMLInputElement).value-1,\r\n                    count: 1\r\n                }\r\n                let _data: any;\r\n                if (isMulti) {\r\n                    //多选题 比较是否重复后决定是否添加选项\r\n                    let num = data.findIndex((item: singleOpt) => item.parId === parentId && item.order === parIndex && item.index === +(event?.target as HTMLInputElement).value-1);\r\n                    _data = [...data];\r\n                    if (num !== -1) {\r\n                        _data[num] = obj;\r\n                        changeData(_data);\r\n                    } else {\r\n                        _data.push(obj)\r\n                        changeData(_data);\r\n                    }\r\n                    getData(_data);\r\n                } else {\r\n                    //单选题 因为只有一个答案所以直接用空arr再push所选选项进去\r\n                    _data = [obj];\r\n                    getData(_data);\r\n                }\r\n                let num2 = count.findIndex((item: singleQue) => item.parId === parentId && item.order === parIndex);\r\n                if (num2 === -1) {\r\n                    let _count: any = [...count];\r\n                    _count.push({\r\n                        parId: parentId,\r\n                        order: parIndex\r\n                    });\r\n                    changeCount(_count);\r\n                }\r\n                console.log(_data)\r\n            }\r\n        }\r\n    }\r\n\r\n    const saveWordData = (id: number, index: number, queType: string, must: boolean): any => {\r\n        if (queType === 'publish') {\r\n            return function (event?: any) {\r\n                if (must && !(event?.target as HTMLTextAreaElement).value) {\r\n                    console.log('此题必填');\r\n                    mustCheck(false);\r\n                } else {\r\n                    let obj = {\r\n                        parId: id,\r\n                        order: index,\r\n                        type: 'word',\r\n                        answer: (event?.target as HTMLTextAreaElement).value\r\n                    }\r\n                    changeWord([obj]);\r\n                    getData([obj]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    switch (item.type) {\r\n        case 'single':\r\n            return (\r\n                <div data-id='single'>\r\n                    <p>Q{item.order + 1}单选题</p>\r\n                    <p>{item.question || '未填写问题'}</p>\r\n                    <Radio.Group defaultValue={radioChecked} onChange={saveOptData(index, item.parId as number, 'publish', false)}>\r\n                        {filterState(opt, item.parId as number, item.order).map((item: singleOpt, index2: number) => {\r\n                            return (\r\n                                <Radio key={item.parId + item.index + index2 + 1} value={index2 + 1}>{item.content}</Radio>\r\n                            )\r\n                        })}\r\n                    </Radio.Group>\r\n                </div>\r\n            );\r\n        case 'multi':\r\n            return (\r\n                <div data-id='multi'>\r\n                    <p>Q{item.order + 1}多选题</p>\r\n                    <p>{item.question || '未填写问题'}</p>\r\n                    <Radio.Group defaultValue={radioChecked}>\r\n                        {filterState(opt, item.parId as number, item.order).map((item: singleOpt, index2: number) => {\r\n                            return (\r\n                                <Checkbox key={item.parId + item.index + index2 + 1} value={index2 + 1} onChange={saveOptData(index, item.parId as number, 'publish', true)}>{item.content}</Checkbox>\r\n                            )\r\n                        })}\r\n                    </Radio.Group>\r\n                </div>\r\n            );\r\n        case 'word':\r\n            return (\r\n                <div data-id='word'>\r\n                    <p>Q{item.order + 1}文字题</p>\r\n                    <p>{item.question}</p>\r\n                    <span>{item.must ? '此项必填' : '此项选填'}</span>\r\n                    <Input.TextArea name=\"\" id=\"\" cols={30} rows={10} placeholder=\"回答内容\" onChange={\r\n                        saveWordData(item.parId as number, index, 'publish', item.must)\r\n                    } />\r\n                </div>\r\n            )\r\n        default:\r\n            return <div></div>;\r\n    }\r\n}\r\n\r\nconst filterState = (data: any, id: number, index: number) => {\r\n    var arr: Array<any> = data.filter((item: singleOpt) => {\r\n        if (item.parId === id && item.order === index) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    });\r\n    return arr;\r\n}\r\n\r\nexport default Que;","import React, { Component, useContext, useEffect, useState } from 'react';\r\nimport Que from './que';\r\nimport './fill.css';\r\nimport { SubmitQue, FillQue, FillOpt, AddCount } from '../action';\r\nimport { totalContext } from '../../Store';\r\nimport { List, Input, message } from 'antd';\r\nimport { singleQue, FilterQue, FilterData, singleData, FilterSingleData } from '../../interface';\r\nimport { clearQue } from '../../create/action';\r\n\r\nconst filterQue: FilterQue = (que, id) => {\r\n    let arr: Array<singleQue> = [];\r\n    que.forEach((item: singleQue) => {\r\n        if (id !== null && item.parId === id) {\r\n            arr.push(item);\r\n        }\r\n    });\r\n    arr.sort((a: singleQue, b: singleQue) => {\r\n        return a.order - b.order;\r\n    })\r\n    return arr;\r\n}\r\nconst filterData: FilterData = (data, id) => {\r\n    let bool: boolean = true;\r\n    data.forEach((item: singleData) => {\r\n        if (id !== null && item.id === id) {\r\n            bool = item.state !== 'done' ? true : false;\r\n        }\r\n    });\r\n    return bool;\r\n}\r\nconst filterSingleData: FilterSingleData = (data, nowQueId) => {\r\n    let obj: any = {};\r\n    data.forEach((item: singleData) => {\r\n        if (item.id === nowQueId) {\r\n            obj = item;\r\n        }\r\n    });\r\n    return obj;\r\n}\r\nconst Fill = () => {\r\n    const { state, dispatch } = useContext(totalContext);\r\n    const { data, que, nowQueId } = state;\r\n    const nowData = filterSingleData(data, nowQueId);\r\n\r\n    const [queData, changeQueData] = useState([]);\r\n    const [optData, changeOptData] = useState([]);\r\n    const [bool, changeBool] = useState(true);\r\n\r\n    const getCompoData = () => {\r\n        return function (this: any, arr: any) {\r\n            //必须在函数内新建并引用this的两个数组 否则for循环内无法读取\r\n            let arr1: any = [...optData], arr2: any = [...queData];\r\n            for (let i of arr) {\r\n                if (i.type) {\r\n                    let num = arr2.findIndex((item: any) => item.parId === i.parId && item.order === i.order);\r\n                    num !== -1 ? arr2[num] = i : arr2.push(i);\r\n                } else {\r\n                    arr1=[i];\r\n                }\r\n            }\r\n            changeOptData(arr1);\r\n            //queData是提交文字题word的内容 集成在que中\r\n            changeQueData(arr2);\r\n        }\r\n    }\r\n\r\n    const mustCheck = (bool: boolean) => {\r\n        changeBool(bool);\r\n    }\r\n\r\n    const submitAll = (data: any, id: number, queData: any, optData: any, bool: boolean) => {\r\n        data.forEach((item: any) => {\r\n            if (item.id === id) {\r\n                if (item.state === 'publish') {\r\n                    if (bool) {\r\n                        dispatch(SubmitQue());\r\n                        queData.forEach((item: any) => {\r\n                            dispatch(FillQue(item.parId, item.order, item.answer));\r\n                        });\r\n                        dispatch(AddCount(id));\r\n                        optData.forEach((item: any) => {\r\n                            dispatch(FillOpt(item.parId, item.order, item.index, item.count))\r\n                        });\r\n                        message.success('提交成功');\r\n                    } else {\r\n                        message.error('问卷必填内容空缺，提交无效');\r\n                    }\r\n                } else {\r\n                    message.error('问卷不为发布状态，提交无效');\r\n                }\r\n            } else {\r\n            }\r\n        });\r\n        window.location.hash = '/list';\r\n    }\r\n\r\n    if (nowQueId === 0 || !filterData(data, nowQueId)) {\r\n        return (\r\n            <div className='fill'>\r\n                <div className='fill-1'>请选择要填写的问卷</div>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div className=\"fill\">\r\n            <div className=\"fill-1\">\r\n                <p className=\"fill-title\">{nowData.name || '未填写'}</p>\r\n                <List\r\n                    className='queFill'\r\n                    itemLayout='vertical'\r\n                    dataSource={filterQue(que, nowQueId)}\r\n                    renderItem={(item: singleQue, index: number) => (\r\n                        <List.Item>\r\n                            <Que\r\n                                item={item}\r\n                                getData={getCompoData()}\r\n                                index={index}\r\n                                mustCheck={mustCheck}\r\n                            />\r\n                        </List.Item>\r\n                    )}\r\n                >\r\n                </List>\r\n                <div className=\"fill-foot\">\r\n                    <Input type=\"button\" value=\"提交问卷\" onClick={() => submitAll(data, nowQueId, queData, optData, bool)} />\r\n                    <Input type=\"button\" value=\"返回列表\" onClick={() => {\r\n                        dispatch(clearQue());\r\n                        window.location.hash = '/list';\r\n                    }} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Fill;","import * as actionTypes from './actionType';\r\n\r\nexport const ChangeOpt = (parIndex: Number, parentId: Number, index: Number, number: number) => ({\r\n    type: actionTypes.SubmitOpt,\r\n    parIndex: parIndex,\r\n    parentId: parentId,\r\n    index: index,\r\n    number: number\r\n});\r\nexport const SubmitQue = () => ({\r\n    type: actionTypes.ChangeQue,\r\n    id: null\r\n});\r\nexport const UpdateWord = (id: number, index: number, answer: string) => ({\r\n    type: actionTypes.UpdateWord,\r\n    id: id,\r\n    index: index,\r\n    answer: answer\r\n});\r\nexport const FillQue = (id: number, index: number, answer: string) => ({\r\n    type: actionTypes.FillQue,\r\n    id: id,\r\n    index: index,\r\n    answer: answer\r\n});\r\nexport const FillOpt = (id: number, order: number, index: number, count: number) => ({\r\n    type: actionTypes.FillOpt,\r\n    id: id,\r\n    order: order,\r\n    index: index,\r\n    count: count\r\n});\r\nexport const AddCount = (id: number) => ({\r\n    type: actionTypes.AddCount,\r\n    id: id\r\n});","export const UpdateOpt = 'Opt/Update';\r\nexport const ChangeQue = 'Que/Change';\r\nexport const SubmitOpt = 'Opt/Submit';\r\nexport const UpdateWord = 'Que/UpdateWord';\r\n\r\nexport const FillQue='Que/Fill';\r\nexport const FillOpt='Opt/Fill';\r\n\r\nexport const AddCount='DataCount/Add';\r\n","import React, { Component } from 'react';\r\n\r\ninterface iCanvas {\r\n    [name: string]: any\r\n}\r\n\r\nclass Canvas extends Component<iCanvas> {\r\n    constructor(props: iCanvas) {\r\n        super(props);\r\n    }\r\n    drawLine(obj: CanvasRenderingContext2D, x: number, y: number, x2: number, y2: number) {\r\n        obj.beginPath();\r\n        obj.moveTo(x, y);\r\n        obj.lineTo(x2, y2);\r\n        obj.strokeStyle = 'black';\r\n        obj.stroke();\r\n    }\r\n    drawMarker(obj: CanvasRenderingContext2D, data: object|null) {\r\n        if (!data) {\r\n            obj.fillText('100%', 10, 50, 40);\r\n            obj.fillText('75%', 10, 105, 40);\r\n            obj.fillText('50%', 10, 160, 40);\r\n            obj.fillText('25%', 10, 215, 40);\r\n            obj.fillText('0', 20, 270, 40);\r\n        } else {\r\n            var len = Object.keys(data).length;\r\n            var num = 500 / (+len + 1);\r\n            var count = 1;\r\n            for (let i in data) {\r\n                obj.fillText(i, num * count + 50, 290, 50);\r\n                count++;\r\n            }\r\n        }\r\n    }\r\n    drawRect(obj: CanvasRenderingContext2D, data: object|any, submitCount: number) {\r\n        var len = Object.keys(data).length;\r\n        var num = 500 / (+len + 1);\r\n        var count = 1;\r\n        for (let i in data) {\r\n            obj.fillStyle = '#1890ff';\r\n            obj.fillRect(num * count + 25, 50 + 220 * (1 - data[i] / submitCount), 50, 220 * data[i] / submitCount);\r\n            count++;\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <canvas id={this.props.que.parId+'-'+this.props.que.order}></canvas>\r\n        );\r\n    }\r\n    componentDidMount(){\r\n        let canvas= document.getElementById(this.props.que.parId+'-'+this.props.que.order) as HTMLCanvasElement;\r\n        let ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\r\n        canvas.width = 600;\r\n        canvas.height = 300;\r\n        this.drawLine(ctx, 50, 50, 50, 270);\r\n        this.drawLine(ctx, 50, 270, 550, 270);\r\n        this.drawMarker(ctx, null);\r\n        if (this.props.type === 'word') {\r\n            let obj = {\r\n                'answer': this.props.que.answer.length\r\n            };\r\n            this.drawMarker(ctx, obj);\r\n            this.drawRect(ctx, obj, this.props.count);\r\n        } else {\r\n            let obj: { [name: number]: number } = {};\r\n            this.props.opt.forEach((item: { index: number, [name: string]: any }) => {\r\n                obj[item.index + 1] = item.count;\r\n            });\r\n            this.drawMarker(ctx, obj);\r\n            this.drawRect(ctx, obj, this.props.count);\r\n        }\r\n    }\r\n}\r\n\r\nexport default Canvas;","import React, { Component, useEffect, useContext } from 'react';\r\nimport Canvas from './canvas';\r\nimport { singleOpt } from '../../interface';\r\n\r\ninterface QueItem {\r\n    [name: string]: any;\r\n}\r\nconst QueItem:React.FC<any> = ({item,index,count,opt}) => {\r\n    function selectOpt(data: any, id: number, index: number) {\r\n        let arr: any = [];\r\n        data.forEach((item: singleOpt) => {\r\n            if (item.parId === id && item.order === index) {\r\n                arr.push(item);\r\n            }\r\n        });\r\n        return arr;\r\n    }\r\n    return (\r\n        <div>\r\n            <p>Q{index + 1}{item.type == 'single' ? '单选题' : item.type == 'multi' ? '多选题' : '文字题'}</p>\r\n            <p>该问题总提交次数为{count}次</p>\r\n            <Canvas\r\n                type={item.type}\r\n                opt={selectOpt(opt, item.parId, item.order)}\r\n                que={item}\r\n                count={count}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n/*\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        opt: state.opt\r\n    }\r\n}\r\n*/\r\nexport default QueItem;","import React, { Component, Props, useContext, useEffect } from 'react';\r\nimport QueItem from './queItem';\r\nimport { clearQue } from '../action';\r\nimport './data.css';\r\nimport { totalContext } from '../../Store';\r\n\r\ninterface any2 extends Array<any> {\r\n    [index: number]: {\r\n        id: number\r\n        name: string\r\n        submit: number\r\n        deadline: string\r\n    }\r\n}\r\ninterface Que extends Array<any> {\r\n    [index: number]: {\r\n        parId: number\r\n        order: number\r\n    }\r\n}\r\n\r\nconst Data = () => {\r\n    const { state, dispatch } = useContext(totalContext);\r\n    const { data, que, opt, nowQueId } = state;\r\n    function selectData(data: any, id: number) {\r\n        let obj = {};\r\n        data.forEach((item: any) => {\r\n            if (item.id === id) obj = item;\r\n        });\r\n        return obj;\r\n    }\r\n    function selectQue(id: number, que: any) {\r\n        let arr: any = [];\r\n        que.forEach((item: any) => {\r\n            if (item.parId === id) {\r\n                arr.push(item);\r\n            }\r\n        });\r\n        arr.sort((a: any, b: any) => {\r\n            return a.order! - b.order!;\r\n        });\r\n        return arr;\r\n    }\r\n    let nowData: any = selectData(data, nowQueId);\r\n    if (nowQueId === 0||JSON.stringify(nowData)==='{}') {\r\n        return (\r\n            <div className='data'>\r\n                <div className=\"data-1\">\r\n                    请选择要查看数据的页面\r\n                    </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"data\">\r\n                <div className=\"data-1\">\r\n                    <div className=\"data-title\">\r\n                        <p>{nowData.name||'未填写'}</p>\r\n                        <span>问卷总提交次数：{nowData.submit} 截止日期：{nowData.deadline||'未填写'}</span>\r\n                    </div>\r\n                    <div className=\"queData\">\r\n                        {selectQue(nowQueId, que).map((item: Array<any>, index: number) => (\r\n                            <QueItem\r\n                                key={nowQueId + 'data' + index}\r\n                                item={item}\r\n                                index={index}\r\n                                count={nowData.submit}\r\n                                opt={opt}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                    <div className=\"data-foot\">\r\n                        <input type=\"button\" value=\"返回\" onClick={() => {\r\n                            window.location.hash = '/list';\r\n                        }} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n/*\r\nconst mapStateToProps = (state: state) => {\r\n    return {\r\n        data: Data.prototype.selectData(state.data as any, state.nowQueId as number) as an,\r\n        que: state.que as any,\r\n        nowQueId: state.nowQueId as number\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        back: () => {\r\n            window.location.hash = '/list';\r\n            dispatch(clearQue());\r\n        }\r\n    }\r\n}\r\n*/\r\nexport default Data;","import React, { Component, useEffect, useState, useContext } from 'react';\r\nimport Header from './header/Header';\r\nimport Home from './home/home';\r\nimport { view as List } from './list'\r\nimport { view as Create } from './create'\r\nimport { view as Fill } from './fill';\r\nimport { view as Data } from './data';\r\nimport { HashRouter, Route } from 'react-router-dom';\r\nimport { Layout } from 'antd';\r\nimport { totalContext } from './Store';\r\n\r\n//下方route路径为'/'的组件 后面添加的 exact （exact=true）属性为只匹配当前路径\r\n//即只有在path为'/'时匹配 '/xxxxx'等不匹配\r\n//不加的话所有斜杠'/'后面跟的路径都会匹配 导致组件渲染重叠\r\nconst Questionnaire: React.SFC = () => {\r\n    const { state,dispatch } = useContext(totalContext);\r\n    useEffect(() => {\r\n        localStorage.setItem('questionnaire-state', JSON.stringify(state));\r\n        return () => {\r\n            localStorage.setItem('questionnaire-state', JSON.stringify(state));\r\n        }\r\n    })\r\n    return (\r\n        <Layout className='layout'>\r\n            <Layout.Header className='header'>\r\n                Questionnaire\r\n                        <Header />\r\n            </Layout.Header>\r\n            <Layout.Content className='content'>\r\n                <HashRouter>\r\n                    <Route path='/' component={Home} exact />\r\n                    <Route path='/home' component={Home} />\r\n                    <Route path='/create' component={Create} />\r\n                    <Route path='/list' component={List} />\r\n                    <Route path='/fill' component={Fill} />\r\n                    <Route path='/data' component={Data} />\r\n                </HashRouter>\r\n            </Layout.Content>\r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport default Questionnaire;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Questionnaire from './Questionnaire';\nimport { Providers } from './Store';\n\nReactDOM.render(\n    <Providers>\n        <Questionnaire />\n    </Providers>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}