{"version":3,"sources":["serviceWorker.js","task/actions.ts","task/actionTypes.ts","constants.ts","task/reducer.ts","task/view/taskList.tsx","task/view/filter.tsx","task/view/task.tsx","content/actionTypes.ts","content/actions.ts","content/view/content.tsx","list/reducer.ts","Store.tsx","list/actionTypes.ts","content/reducer.ts","list/actions.ts","list/view/ulList.tsx","list/view/allList.tsx","TodoApp.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","thingSelected","taskId","type","id","FilterTypes","ContentTypes","DISPLAY","EDIT","taskReducer1","state","action","_state","JSON","parse","stringify","bool","i","length","selected","j","task","push","parentId","Date","title","time","content","done","filter","item","map","taskReducer2","filterSelect","name","TaskList","useContext","totalContext","dispatch","arr","Error","searchTask","obj","forEach","mode","key","Item","style","backgroundColor","onClick","Filter","onClicked","text","Group","size","buttonStyle","defaultValue","Button","value","Task","selectedTask","position","bottom","width","borderTop","Display","Edit","display","actionTypes","toggle","target","Content","taskState","active","useState","thisState","changeState","console","log","onInputChange","event","thisState2","className","height","Header","actions","placeholder","onChange","search","catId","onFinishFilter","addonBefore","TextArea","autoSize","minRows","clone","initState","localStorage","getItem","list","catName","reducers","newState","Object","keys","childState","combineReducers","selectedId","getTree","state2","splice","reducer","createContext","addCat","UlList","todos","sort","a","b","renderTree","data","data-id","onTitleClick","AllList","statePrompt","changeStatePrompt","inputValue","changeInputValue","calTask","num","visible","onOk","onCancel","ItemGroup","top","TodoApp","useEffect","setItem","minHeight","borderBottom","Sider","theme","borderRight","clearSelected","ReactDOM","render","props","useReducer","Provider","children","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d18c51e5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Add, Remove, Selected, FilterSelected, Toggle, Edit } from './actionTypes';\r\nimport { TaskAction, TaskAction2, TaskAction3 } from '../interface';\r\n\r\nexport const addTask:TaskAction = (name) => ({\r\n    type: Add,\r\n    id: Date.parse(`${new Date()}`),\r\n    taskName: name\r\n});\r\nexport const removeTask:TaskAction2 = (taskId) => ({\r\n    type: Remove,\r\n    id: taskId\r\n});\r\nexport const thingSelected:TaskAction2 = (taskId) => ({\r\n    type: Selected,\r\n    id: taskId\r\n});\r\nexport const filterSelected:TaskAction = (name) => ({\r\n    type: FilterSelected,\r\n    filter: name\r\n});\r\nexport const toggle:TaskAction2 = (taskId) => ({\r\n    type: Toggle,\r\n    id: taskId\r\n});\r\nexport const edit:TaskAction3 = () => ({\r\n    type: Edit\r\n});\r\n","export const Add='TASK/Add';\r\nexport const Remove='TASK/Remove';\r\nexport const Selected='TASK/Selected';\r\nexport const FilterSelected='FilterSelected';\r\nexport const Toggle=\"TASK/Toggle\";\r\nexport const Edit = 'Content/edit';","export const FilterTypes={\r\n    ALL:'全部',\r\n    COMPLETED:'已完成',\r\n    UNCOMPLETED:'未完成'\r\n}\r\nexport const ContentTypes={\r\n    DISPLAY:'显示',\r\n    EDIT:'编辑'\r\n}","import { Add, Remove, Selected, FilterSelected, Toggle } from './actionTypes';\r\nimport { FilterTypes } from '../constants';\r\nimport { Reducer } from 'react';\r\nimport { SingleStateTask } from '../interface';\r\nconst taskReducer1:Reducer<[SingleStateTask],any> = (state, action) => {\r\n    switch (action.type) {\r\n        case Add: {\r\n            var _state = JSON.parse(JSON.stringify(state));\r\n            var bool = 1;\r\n            for (let i = 0; i < _state.length; i++) {\r\n                if (_state[i].taskId === action.selected) {\r\n                    for (let j in action.task) {\r\n                        _state[i][j] = action.task[j];\r\n                        bool = 0;\r\n                    }\r\n                }\r\n            }\r\n            if (bool) {\r\n                _state.push({\r\n                    parentId: action.id,\r\n                    taskId: Date.parse(`${new Date()}`),\r\n                    title: action.task.title,\r\n                    time: action.task.time,\r\n                    content: action.task.content,\r\n                    done: false\r\n                })\r\n            }\r\n            return _state;\r\n        }\r\n        case Remove: {\r\n            return state.filter(item => {\r\n                return item.taskId !== action.id;\r\n            })\r\n        }\r\n        case Toggle: {\r\n            return state.map(item => {\r\n                if (item.taskId === action.id) {\r\n                    return { ...item, done: action.done };\r\n                } else {\r\n                    return item;\r\n                }\r\n            })\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\nconst taskReducer2:Reducer<number,any> = (state, action) => {\r\n    switch (action.type) {\r\n        case Selected: {\r\n            return action.id\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\nconst filterSelect:Reducer<{},any> = (state = FilterTypes.ALL, action) => {\r\n    switch (action.type) {\r\n        case FilterSelected: {\r\n            return { name: action.filter };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport { taskReducer1, taskReducer2, filterSelect };","import React, { useContext } from 'react';\r\nimport { removeTask, thingSelected } from '../actions';\r\nimport { FilterTypes } from '../../constants';\r\nimport { Menu } from 'antd';\r\nimport SubMenu from 'antd/lib/menu/SubMenu';\r\nimport { totalContext } from '../../Store';\r\nimport { TaskListObj, RenderTree, SingleStateTask, SearchTask } from '../../interface';\r\n\r\nconst searchTask=(id:number, task:[SingleStateTask], filter:string)=> {\r\n    var arr = [];\r\n    for (let i = 0; i < task.length; i++) {\r\n        if (task[i].parentId === id) {\r\n            arr.push(task[i]);\r\n        }\r\n    }\r\n    switch (filter) {\r\n        case FilterTypes.ALL:\r\n            return arr;\r\n        case FilterTypes.UNCOMPLETED:\r\n            return arr.filter(item => !item.done);\r\n        case FilterTypes.COMPLETED:\r\n            return arr.filter(item => item.done);\r\n        default:\r\n            throw new Error('unsupported filter');\r\n    }\r\n}\r\n\r\nconst TaskList = ({ }) => {\r\n    let { state, dispatch } = useContext(totalContext);\r\n    let task = searchTask(state.selected, state.task, state.filter.name)\r\n    var obj:TaskListObj = {};\r\n    task.forEach(item => {\r\n        if (!obj[item.time]) {\r\n            obj[item.time] = [];\r\n        }\r\n        obj[item.time].push(item);\r\n    });\r\n    var arr = [];\r\n    for (var i in obj) {\r\n        arr.push(obj[i]);\r\n    }\r\n    const renderTree:RenderTree = (data) => {\r\n        return data.map((item:[SingleStateTask]) => (\r\n            <SubMenu title={item[0].time} key={item[0].time}>\r\n                {item.map(item => (\r\n                    <Menu.Item key={item.taskId} style={item.done ? { backgroundColor: '#EBFFCC' } : { backgroundColor: '#e6f7ff' }} onClick={() => dispatch(thingSelected(item.taskId))}>{item.title}</Menu.Item>\r\n                ))}\r\n            </SubMenu>\r\n        ))\r\n    }\r\n    let jsx = <Menu mode='inline'>\r\n        {renderTree(arr)}\r\n    </Menu>\r\n    return jsx;\r\n}\r\n\r\n\r\nexport default TaskList;\r\n\r\n/*\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        task: searchTask(state.selected, state.task, state.filter.name),\r\n        selected: state.selectedTask\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        onSelect: (id) => {\r\n            dispatch(thingSelected(id))\r\n        },\r\n        onRemove: (id) => {\r\n            dispatch(removeTask(id))\r\n        },\r\n        removeSelected: (obj) => {\r\n            if (obj.nodeName === \"DIV\") {\r\n                dispatch(thingSelected(null));\r\n            }\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskList);\r\n*/","import React, { useContext } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { filterSelected } from '../actions';\r\nimport { FilterTypes } from '../../constants';\r\nimport { Radio } from 'antd';\r\nimport { totalContext } from '../../Store';\r\n\r\nconst Filter = ({}) => {\r\n    const { dispatch } = useContext(totalContext);\r\n    const onClicked=(text:string)=>{\r\n        dispatch(filterSelected(text));\r\n    }\r\n    return (\r\n        <div id='list1'>\r\n            <Radio.Group size='middle' buttonStyle='solid' defaultValue='a'>\r\n                <Radio.Button value='a' onClick={() => onClicked(FilterTypes.ALL)}>{FilterTypes.ALL}</Radio.Button>\r\n                <Radio.Button value='b' onClick={() => onClicked(FilterTypes.UNCOMPLETED)}>{FilterTypes.UNCOMPLETED}</Radio.Button>\r\n                <Radio.Button value='c' onClick={() => onClicked(FilterTypes.COMPLETED)}>{FilterTypes.COMPLETED}</Radio.Button>\r\n            </Radio.Group>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Filter;\r\n/*\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        filter: state.filter.name\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        onClick: (text) => {\r\n            dispatch(filterSelected(text));\r\n        }\r\n    }\r\n}\r\nFilter.propTypes = {\r\n    onClick: PropTypes.func.isRequired\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n*/\r\n","import React, { useContext } from 'react';\r\nimport TaskList from './taskList';\r\nimport Filter from './filter';\r\nimport './style.css';\r\nimport { thingSelected, edit, removeTask } from '../actions';\r\nimport { Menu } from 'antd';\r\nimport { totalContext } from '../../Store';\r\nconst Task = ({}) => {\r\n    const { state, dispatch } = useContext(totalContext);\r\n    return (\r\n        <Menu id='task'>\r\n            <Filter />\r\n            <TaskList />\r\n            <Menu.Item onClick={() => dispatch(removeTask(state.selectedTask))} style={{ position: 'fixed', bottom: '40px', width: '206px', borderTop: '1px solid #f0f0f0' }}>删除任务</Menu.Item>\r\n            <Menu.Item style={{ position: 'fixed', bottom: '0px', width: '206px', borderTop: '1px solid #f0f0f0' }} onClick={() => state.selected || state.selected === 0 ? (\r\n                dispatch(thingSelected(null)),\r\n                dispatch(edit())\r\n            ) : []}>添加任务</Menu.Item>\r\n        </Menu>\r\n    )\r\n}\r\n\r\nexport default Task;\r\n/*\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        catId: state.selected,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        onAdd: () => {\r\n            dispatch(thingSelected(null));\r\n            dispatch(edit());\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Task);\r\n*/","export const Add = 'TASK/Add';\r\nexport const Display = 'Content/display';\r\nexport const Edit = 'Content/edit';\r\nexport const Toggle=\"TASK/Toggle\";","import * as actionTypes from './actionTypes';\r\nimport { AddTask, Display, Edit, Toggle } from '../interface';\r\n\r\nexport const addTask:AddTask=(obj,catId,selected)=>({\r\n    type:actionTypes.Add,\r\n    task:obj,\r\n    id:catId,\r\n    selected:selected\r\n});\r\nexport const display:Display=()=>({\r\n    type:actionTypes.Display\r\n});\r\nexport const edit:Edit=()=>({\r\n    type:actionTypes.Edit\r\n});\r\nexport const toggle:Toggle=(taskId,bool)=>({\r\n    type:actionTypes.Toggle,\r\n    id:taskId,\r\n    done:bool\r\n});","import React, { Component, useContext, useState, SetStateAction, Dispatch } from 'react';\r\nimport { ContentTypes } from '../../constants';\r\nimport * as actions from '../actions';\r\nimport './style.css';\r\nimport { Layout, Input, Button } from 'antd';\r\nimport { totalContext } from '../../Store';\r\nimport { OnInputChange, ContentThisState, OnFinishFilter, SearchTask, SingleStateTask } from '../../interface';\r\n\r\nconst searchTask:SearchTask=(taskId:number, task:[SingleStateTask])=> {\r\n    let target;\r\n    for (let i = 0; i < task.length; i++) {\r\n        if (task[i].taskId === taskId) {\r\n            target = task[i];\r\n        }\r\n    }\r\n    return target;\r\n}\r\n\r\nconst Content = () => {\r\n    const { state, dispatch } = useContext(totalContext);\r\n    const [target, active, taskId, id] = [searchTask(state.selectedTask, state.task), state.taskState, state.selectedTask, state.selected];\r\n    const [thisState, changeState]: [ContentThisState, Dispatch<SetStateAction<ContentThisState>>] = useState(target?{\r\n        title: target!.title,\r\n        time: target!.time,\r\n        content: target!.content\r\n    }:{\r\n        title:'空',\r\n        time:'1970-01-01',\r\n        content:'空'\r\n    });\r\n    console.log(thisState)\r\n    const onInputChange: OnInputChange = (event, item) => {\r\n        let thisState2: ContentThisState = { ...thisState };\r\n        thisState2[item] = (event.target as HTMLInputElement).value;\r\n        changeState(thisState2);\r\n    }\r\n    const onFinishFilter: OnFinishFilter = (target, id, selected) => {\r\n        if (thisState.title.length > 10 || thisState.time.search(/^\\d{4}-\\d{2}-\\d{2}$/) === -1 || thisState.content.length === 0) {\r\n            console.log('格式不符 提交失败');\r\n            return false;\r\n        };\r\n        dispatch(actions.addTask(thisState, id, selected));\r\n        dispatch(actions.display());\r\n    }\r\n    return (\r\n        <div className='content'>\r\n            <Layout style={{ backgroundColor: 'white', height: '100%' }}>\r\n                <Layout.Header className='contentHeader'>\r\n                    {active === ContentTypes.DISPLAY ? (\r\n                        <div>\r\n                            <span className='taskNameTitle'>{thisState.title}</span>\r\n                            <span className='taskNameButtonInDisplay'>\r\n                                <Button onClick={() => taskId || taskId === 0 ? dispatch(actions.edit()) : []}>编辑</Button>\r\n                                <Button onClick={() => dispatch(actions.toggle(taskId, true))}>完成</Button>\r\n                                <Button onClick={() => dispatch(actions.toggle(taskId, false))}>取消完成</Button>\r\n                            </span>\r\n                        </div>\r\n                    ) : (\r\n                            <div className='taskNameInEdit'>\r\n                                <Input className='taskNameInEditInput' type=\"text\" placeholder=\"可输入十个字符以内\" onChange={(event) => onInputChange(event, 'title')} defaultValue={thisState.title} style={{ width: 'auto' }} />\r\n                                <span>\r\n                                    <Button onClick={() => dispatch(actions.display())}>取消</Button>\r\n                                    <Button onClick={() => { onFinishFilter(target!, id, taskId) }}>确认</Button>\r\n                                </span>\r\n                            </div>\r\n                        )}\r\n                </Layout.Header>\r\n                <Layout.Header className='contentHeader'>\r\n                    {active === ContentTypes.DISPLAY ? (\r\n                        <span className='taskNameTitle'>任务日期：<span>{thisState.time}</span></span>\r\n                    ) : (\r\n                            <Input className='taskTime' placeholder=\"yyyy-mm-dd\" onChange={(event) => onInputChange(event, 'time')} defaultValue={thisState.time} addonBefore='任务日期：'></Input>\r\n                        )}\r\n                </Layout.Header>\r\n                <Layout.Content>\r\n                    {active === ContentTypes.DISPLAY ? (\r\n                        <div className='taskNameTitle'>{thisState.content}</div>\r\n                    ) : (\r\n                            <Input.TextArea autoSize={{ minRows: 10 }} placeholder=\"任务内容\" onChange={(event) => onInputChange(event, 'content')} defaultValue={thisState.content} />\r\n                        )}\r\n                </Layout.Content>\r\n            </Layout>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Content;\r\n/*\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        target: searchTask(state.selectedTask, state.task),\r\n        active: state.taskState,\r\n        taskId: state.selectedTask,\r\n        id: state.selected\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        onEdit: () => {\r\n            dispatch(actions.edit())\r\n        },\r\n        onChangeState: (id, bool) => {\r\n            dispatch(actions.toggle(id, bool))\r\n        },\r\n        onCancel: () => {\r\n            dispatch(actions.display())\r\n        },\r\n        onFinish: (obj, id, selected) => {\r\n            if (obj.title.length > 10 || obj.time.search(/^\\d{4}-\\d{2}-\\d{2}$/) === -1 || obj.content.length === 0) return false;\r\n            dispatch(actions.addTask(obj, id, selected));\r\n            dispatch(actions.display())\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Content);\r\n*/","import { Add, Remove, Selected } from './actionTypes';\r\nimport { Clone, SingleStateList } from '../interface';\r\nimport { Reducer } from 'react';\r\n//深度复制方法\r\nvar clone:Clone<[any]> = function (obj) {\r\n    return JSON.parse(JSON.stringify(obj));\r\n}\r\nconst listReducer1:Reducer<[SingleStateList],any> = (state, action) => {\r\n    switch (action.type) {\r\n        case Add: {\r\n            var _state = clone(state);\r\n            if (action.selectedId||action.selectedId===0) {\r\n                (function getTree(item) {\r\n                    for (let i = 0; i < item.length; i++) {\r\n                        if (item[i].id === action.selectedId) {\r\n                            item[i].list.push({\r\n                                id: action.id,\r\n                                catName: action.catName,\r\n                                list: []\r\n                            });\r\n                        }\r\n                        if (item[i].list.length !== 0) {\r\n                            getTree(item[i].list);\r\n                        }\r\n                    }\r\n                })(_state);\r\n            } else {\r\n                _state.push({\r\n                    id: action.id,\r\n                    catName: action.catName,\r\n                    list: []\r\n                })\r\n            }\r\n            return _state;\r\n        }\r\n        case Remove: {\r\n            var state2 = clone(state);\r\n            (function getTree(item) {\r\n                for (let i = 0; i < item.length; i++) {\r\n                    if (item[i].list.length !== 0) {\r\n                        getTree(item[i].list);\r\n                    }\r\n                    if (item[i].id === action.id) {\r\n                        item.splice(i, 1);\r\n                    };\r\n                }\r\n            })(state2);\r\n            return state2;\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\nconst listReducer2:Reducer<[SingleStateList],any> = (state, action) => {\r\n    if (action.type === Selected) {\r\n        return action.id;\r\n    } else {\r\n        return state;\r\n    }\r\n}\r\nexport { listReducer1, listReducer2 };","import React, { createContext, useReducer, Context, Reducer, ProviderProps } from 'react';\r\nimport { reducer } from './task';\r\nimport { reducer as contentReducer } from './content';\r\nimport { listReducer1, listReducer2 } from './list/reducer';\r\nimport { CombineReducerProp } from './interface';\r\n\r\n//初始store\r\nlet initState = JSON.parse(localStorage.getItem('state')!) || {\r\n    list: [\r\n        //默认分类 id设为0\r\n        {\r\n            id: 0,\r\n            catName: \"默认分类\",\r\n            //list为目录下的子分类 默认分类不可有子分类 故为空\r\n            list: [\r\n                {\r\n                    id: 1,\r\n                    catName: '默认分类子分类1',\r\n                    list: []\r\n                }, {\r\n                    id: 2,\r\n                    catName: '默认分类子分类2',\r\n                    list: []\r\n                }\r\n            ]\r\n        }\r\n        //接下来是后面可以新添加的分类\r\n    ],\r\n    selected: 0,\r\n    selectedTask: 0,\r\n    filter: {\r\n        name: '全部'\r\n    },\r\n    task: [\r\n        {\r\n            parentId: 0,\r\n            taskId: 0,\r\n            title: \"默认分类示例\",\r\n            time: \"1970-01-01\",\r\n            done: true,\r\n            content: \"任务内容\"\r\n        }\r\n    ],\r\n    taskState: '显示'\r\n};\r\n//组合reducer\r\nlet reducers = combineReducers({\r\n    list: listReducer1,\r\n    selected: listReducer2,\r\n    filter: reducer.filterSelect,\r\n    task: reducer.taskReducer1,\r\n    selectedTask: reducer.taskReducer2,\r\n    taskState: contentReducer\r\n});\r\n\r\n//provider组件\r\nexport const totalContext: Context<any> = createContext({});\r\n\r\n//combineReducers函数\r\nexport function combineReducers(reducers: CombineReducerProp) {\r\n    return function (state: any = {}, action: any): Reducer<any, any> {\r\n        const newState:any = {};\r\n        Object.keys(reducers).forEach(key => {\r\n            const childState = state[key];\r\n            newState[key] = reducers[key](childState, action);\r\n        });\r\n        return newState;\r\n    }\r\n}\r\n\r\nexport const Providers = (props:ProviderProps<JSX.Element>) => {\r\n    const [state, dispatch] = useReducer(reducers, initState);\r\n    return (\r\n        <totalContext.Provider value={{ state, dispatch }}>\r\n            {props.children}\r\n        </totalContext.Provider>\r\n    );\r\n};\r\n","export const Add='Add';\r\nexport const Remove='Remove';\r\nexport const Selected='Selected';","import * as actionTypes from './actionTypes';\r\nimport {ContentTypes} from '../constants';\r\nimport { ContentAction } from '../interface';\r\n\r\nexport default function contentReducer(state=[],action:any){\r\n    switch(action.type){\r\n        case actionTypes.Display:\r\n            return ContentTypes.DISPLAY;\r\n        case actionTypes.Edit:\r\n            return ContentTypes.EDIT;\r\n        default:\r\n            return state;\r\n    }\r\n}","import { Add, Remove, Selected } from './actionTypes';\r\nimport { AddCat, RemoveCat, ThingSelected } from '../interface';\r\nexport const addCat:AddCat = (name, id) => ({\r\n    type: Add,\r\n    id: Date.parse(`${new Date()}`),\r\n    catName: name,\r\n    selectedId: id\r\n});\r\nexport const removeCat:RemoveCat = (catId) => ({\r\n    type: Remove,\r\n    id: catId\r\n});\r\n//这里使用antd的submenu组件之后不知道为什么明明只触发了一次帮i党的函数\r\n//却会调用两次actions函数。。。\r\n//第二次发送的id还是null\r\n//草 原来是在父组件设置了监听 冒泡的时候又被捕获了 再发了一次\r\n//怪不得在子组件怎么找都找不到原因\r\nexport const thingSelected:ThingSelected = (catId) => ({\r\n    type: Selected,\r\n    id: catId\r\n})","import React, { useContext } from 'react';\r\nimport { removeCat, thingSelected } from '../actions';\r\nimport { Menu, Button } from 'antd';\r\nimport SubMenu from 'antd/lib/menu/SubMenu';\r\nimport { totalContext } from '../../Store';\r\nimport { SingleStateList } from '../../interface';\r\n\r\nconst UlList = () => {\r\n    const { state, dispatch } = useContext(totalContext);\r\n    const todos = state.list;\r\n    //根据id（分类添加时间）进行排序 新添加的向下排列\r\n    todos.sort((a:SingleStateList, b:SingleStateList) => {\r\n        return a.id - b.id;\r\n    });\r\n    const renderTree = (data:[SingleStateList]) => {\r\n        return data.map(item => {\r\n            if (item.list.length === 0) {\r\n                return (<Menu.Item className='listClass' id={`${item.id}`} key={item.id} onClick={() => dispatch(thingSelected(item.id))}>\r\n                    {item.catName}\r\n                </Menu.Item>)\r\n            } else {\r\n                return (<SubMenu className='listClass' data-id={`${item.id}`} key={item.id} title={(<span>{item.catName}</span>)} onTitleClick={() => dispatch(thingSelected(item.id))}>\r\n                    {renderTree(item.list)}\r\n                </SubMenu >)\r\n            }\r\n        })\r\n    }\r\n    return (\r\n        <div className='ul1'>\r\n            <Menu mode='inline'>\r\n                {renderTree(todos)}\r\n            </Menu>\r\n        </div>\r\n    )\r\n}\r\nexport default UlList;\r\n/*\r\nulList.propTypes = {\r\n    todos: PropTypes.array.isRequired\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        todos: state.list,\r\n        selected: state.selected\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onRemove: (id) => {\r\n            dispatch(removeCat(id));\r\n            //移除分类后focus到默认分类\r\n            dispatch(thingSelected(null));\r\n        },\r\n        onSelected: (id) => {\r\n            dispatch(thingSelected(id));\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ulList);\r\n*/","import React, { useContext, useState } from 'react';\r\nimport UlList from './ulList';\r\nimport { addCat, thingSelected, removeCat } from '../actions';\r\nimport './style.css';\r\nimport { Menu, Layout, Modal, Input } from 'antd';\r\nimport { totalContext } from '../../Store';\r\nimport { ClearSelected, CalTask, SingleStateTask } from '../../interface';\r\n\r\nconst AllList = () => {\r\n    let { state, dispatch } = useContext(totalContext);\r\n    let id = state.selected;\r\n    let [statePrompt, changeStatePrompt] = useState(false);\r\n    let [inputValue,changeInputValue]=useState('');\r\n\r\n    function btnClick() {\r\n        if (inputValue) {\r\n            console.log(id);\r\n            //onAdd(prom, id);\r\n            dispatch(addCat(inputValue, id));\r\n        }\r\n    }\r\n    //计算任务数量\r\n    const calTask: CalTask = (state, bool) => {\r\n        //bool为计算 所有/未完成 开关\r\n        if (bool) {\r\n            return state.task.length;\r\n        } else {\r\n            let num = 0;\r\n            state.task.forEach((item: SingleStateTask) => {\r\n                num += item.done ? 0 : 1;\r\n            });\r\n            return num;\r\n        }\r\n    }\r\n    return (\r\n        <div className='list' >\r\n            <Modal\r\n                title='taskModal'\r\n                visible={statePrompt}\r\n                onOk={(event)=>{\r\n                    btnClick()\r\n                    changeStatePrompt(false);\r\n                }}\r\n                onCancel={(event)=>{\r\n                    changeStatePrompt(false);\r\n                }}\r\n            >\r\n                <p>新建分类</p>\r\n                <Input onChange={(event:React.ChangeEvent)=>changeInputValue((event.target as HTMLInputElement).value)} placeholder='请输入分类名称'></Input>\r\n            </Modal>\r\n            <Menu id='list'>\r\n                <Menu.ItemGroup title={<span>所有任务 ({calTask(state, false)}/{calTask(state, true)})</span>}></Menu.ItemGroup>\r\n                <Menu.ItemGroup title='分类列表'></Menu.ItemGroup>\r\n                <UlList />\r\n            </Menu>\r\n            <div className='listDiv'>\r\n                <Menu>\r\n                    <Menu.Item onClick={() => dispatch(removeCat(state.selected))} style={{ width: '199px', borderTop: '1px solid #f0f0f0',position:'relative',top:'4px'}}>删除分类</Menu.Item>\r\n                    <Menu.Item onClick={() => changeStatePrompt(true)} style={{ width: '199px', borderTop: '1px solid #f0f0f0' }}>添加分类</Menu.Item>\r\n                </Menu>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default AllList;\r\n/*\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        id: state.selected,\r\n    };\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onAdd: (name, id) => {\r\n            dispatch(addCat(name, id));\r\n        },\r\n        onRemove: (obj) => {\r\n            if (obj.nodeName === \"DIV\") {\r\n                dispatch(thingSelected(null));\r\n            }\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AllList);\r\n*/","import React, { Component, useContext, useEffect, Context, SFC } from 'react';\r\nimport { view as List } from './list';\r\nimport { view as Task, reducer as a } from './task';\r\nimport { view as Content } from './content';\r\nimport { Layout } from 'antd';\r\nimport { totalContext } from './Store';\r\nimport { UseContext, ClearSelected } from './interface';\r\nimport { thingSelected } from './list/actions';\r\n\r\nconst TodoApp: React.SFC = () => {\r\n    const { state, dispatch } = useContext<UseContext>(totalContext);\r\n\r\n    const clearSelected: ClearSelected = (event, value) => {\r\n        if ((event.target as HTMLDivElement).className === 'list' || (event.target as HTMLDivElement).id === 'list') {\r\n            dispatch(thingSelected(value));\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('state', JSON.stringify(state));\r\n        return () => {\r\n            localStorage.setItem('state', JSON.stringify(state));\r\n        }\r\n    });\r\n    return (\r\n        <div className='div1' >\r\n            <Layout style={{ minHeight: '100vh' }}>\r\n                <Layout.Header style={{ backgroundColor: 'white', borderBottom: '1px solid #f0f0f0' }}>To do list</Layout.Header>\r\n                <Layout style={{ backgroundColor: 'white' }}>\r\n                    <Layout.Sider theme='light' style={{ borderRight: '1px solid #f0f0f0' }} onClick={(event) => clearSelected(event, null)}>\r\n                        <List />\r\n                    </Layout.Sider>\r\n                    <Layout.Sider theme='light' width='auto' style={{ borderRight: '1px solid #f0f0f0' }}>\r\n                        <Task />\r\n                    </Layout.Sider>\r\n                    <Layout.Content style={{ position: 'relative' }}>\r\n                        <Content />\r\n                    </Layout.Content>\r\n                </Layout>\r\n            </Layout>\r\n        </div>\r\n    );\r\n    /*\r\n    componentDidMount() {\r\n        localStorage.setItem('state', JSON.stringify(this.props.prop));\r\n    }\r\n    componentDidUpdate() {\r\n        localStorage.setItem('state', JSON.stringify(this.props.prop));\r\n    }\r\n    */\r\n}\r\nexport default TodoApp;\r\n/*\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        prop: state\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(TodoApp);\r\n*/\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { Providers } from './Store';\nimport TodoApp from './TodoApp';\n\nReactDOM.render(\n    <Providers>\n        <TodoApp />\n    </Providers>\n    , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}