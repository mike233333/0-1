{"version":3,"sources":["list/view/listItem.js","list/actions.js","list/actionTypes.js","list/view/ulList.js","list/view/allList.js","list/reducer.js","task/actions.js","task/actionTypes.js","constants.js","task/reducer.js","task/view/taskItem.js","task/view/taskList.js","task/view/filter.js","task/view/task.js","content/actionTypes.js","content/actions.js","content/view/taskContent.js","content/view/taskName.js","content/view/taskTime.js","content/view/content.js","TodoApp.js","serviceWorker.js","Store.js","content/reducer.js","index.js"],"names":["ListItem","className","onRemove","onSelected","catId","name","type","value","onClick","data-id","thingSelected","id","connect","state","todos","list","selected","dispatch","onSelect","sort","a","b","map","item","getTree","key","catName","length","item2","onAdd","Date","parse","selectedId","addCat","obj","nodeName","event","target","prom","prompt","console","log","clone","JSON","stringify","taskId","FilterTypes","ALL","COMPLETED","UNCOMPLETED","ContentTypes","taskReducer1","action","_state","bool","i","j","task","push","parentId","title","time","content","done","filter","taskReducer2","filterSelect","TaskItem","task-id","searchTask","arr","Error","selectedTask","ownProps","removeSelected","forEach","text","Display","display","actionTypes","TaskContent","props","onInputChange","bind","this","prop","active","cols","rows","placeholder","onChange","defaultValue","Component","TaskName","TaskTime","Content","deliver","setState","onEdit","onChangeState","onCancel","onFinish","taskState","actions","search","TodoApp","localStorage","setItem","Boolean","window","location","hostname","match","reducers","combineReducers","state2","splice","reducer","initialState","getItem","createStore","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7f90ea25.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nconst ListItem = ({ className, onRemove, onSelected, catId, name }) => {\r\n    //const checkedProp = completed ? { checked: true } : {};\r\n    return (\r\n        <h1>\r\n            <input type='button' value='X' onClick={onRemove} />\r\n            <p className={className} data-id={catId} onClick={onSelected}>{name}<span></span></p>\r\n        </h1>\r\n    )\r\n}\r\nListItem.propTypes = {\r\n    onRemove: PropTypes.func.isRequired,\r\n    onSelected: PropTypes.func.isRequired,\r\n    catId: PropTypes.number.isRequired,\r\n    name: PropTypes.string.isRequired\r\n}\r\nexport default ListItem;","import { Add, Remove, Selected } from './actionTypes';\r\nexport const addCat = (name, id) => ({\r\n    type: Add,\r\n    id: Date.parse(new Date()),\r\n    catName: name,\r\n    selectedId: id\r\n});\r\nexport const removeCat = (catId) => ({\r\n    type: Remove,\r\n    id: catId\r\n});\r\nexport const thingSelected = (catId) => ({\r\n    type: Selected,\r\n    id: catId,\r\n})","export const Add='Add';\r\nexport const Remove='Remove';\r\nexport const Selected='Selected';","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ListItem from './listItem';\r\nimport { connect } from 'react-redux';\r\nimport { removeCat, thingSelected } from '../actions';\r\n\r\nconst ulList = ({ todos, selected, onSelect, onRemove }) => {\r\n    //根据id（分类添加时间）进行排序 新添加的向下排列\r\n    todos.sort((a, b) => {\r\n        return a.id - b.id;\r\n    })\r\n    return (\r\n        <ul className='ul1'>\r\n            {\r\n                todos.map(item => {\r\n                    return (function getTree(item) {\r\n                        var jsx =\r\n                            <li key={item.id} >\r\n                                <ListItem\r\n                                    className={selected === item.id ? 'hover' : []}\r\n                                    catId={item.id}\r\n                                    name={item.catName}\r\n                                    onRemove={() => onRemove(item.id)}\r\n                                    onSelected={() => onSelect(item.id)} />\r\n                                <ul className='ul2'>\r\n                                    {\r\n                                        item.list.length !== 0 ? item.list.sort((a, b) => {\r\n                                            return a.id - b.id;\r\n                                        }).map(item2 => {\r\n                                            var jsx = getTree(item2)\r\n                                            return jsx;\r\n                                        }) : []\r\n                                    }\r\n                                </ul>\r\n                            </li>;\r\n                        return jsx;\r\n                    })(item);\r\n                })\r\n            }\r\n        </ul>\r\n    )\r\n}\r\nulList.propTypes = {\r\n    todos: PropTypes.array.isRequired\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        todos: state.list,\r\n        selected: state.selected\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onRemove: (id) => {\r\n            dispatch(removeCat(id));\r\n            //移除分类后focus到默认分类\r\n            dispatch(thingSelected(null));\r\n        },\r\n        onSelect: (id) => {\r\n            dispatch(thingSelected(id));\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ulList)","import React from 'react';\r\nimport UlList from './ulList';\r\nimport { connect } from 'react-redux';\r\nimport { addCat, thingSelected } from '../actions';\r\nimport './style.css';\r\nconst AllList = ({ onAdd, id, onRemove }) => {\r\n    function btnClick() {\r\n        var prom = prompt(`请输入要添加的分类名称`);\r\n        if (prom) {\r\n            console.log(id)\r\n            onAdd(prom, id);\r\n        }\r\n    }\r\n    return (\r\n        <div id='task' onClick={(event)=>onRemove(event.target)}>\r\n            <p>所有任务<span></span></p>\r\n            <p>分类列表</p>\r\n            <UlList />\r\n            <div className='foot' onClick={btnClick}>添加分类</div>\r\n        </div>\r\n    )\r\n\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        id: state.selected,\r\n    };\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onAdd: (name, id) => {\r\n            dispatch(addCat(name, id));\r\n        },\r\n        onRemove: (obj) => {\r\n            if(obj.nodeName===\"DIV\"){\r\n                dispatch(thingSelected(null));\r\n            }\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AllList)","import { Add, Remove, Selected } from './actionTypes';\r\n//深度复制方法\r\nvar clone = function (obj) {\r\n    return JSON.parse(JSON.stringify(obj));\r\n}\r\nconst listReducer1 = (state = [], action) => {\r\n    switch (action.type) {\r\n        case Add: {\r\n            var _state = clone(state);\r\n            if (action.selectedId||action.selectedId===0) {\r\n                (function getTree(item) {\r\n                    for (let i = 0; i < item.length; i++) {\r\n                        if (item[i].id === action.selectedId) {\r\n                            item[i].list.push({\r\n                                id: action.id,\r\n                                catName: action.catName,\r\n                                list: []\r\n                            });\r\n                        }\r\n                        if (item[i].list.length !== 0) {\r\n                            getTree(item[i].list);\r\n                        }\r\n                    }\r\n                })(_state);\r\n            } else {\r\n                _state.push({\r\n                    id: action.id,\r\n                    catName: action.catName,\r\n                    list: []\r\n                })\r\n            }\r\n            return _state;\r\n        }\r\n        case Remove: {\r\n            var state2 = clone(state);\r\n            (function getTree(item) {\r\n                for (let i = 0; i < item.length; i++) {\r\n                    if (item[i].list.length !== 0) {\r\n                        getTree(item[i].list);\r\n                    }\r\n                    if (item[i].id === action.id) {\r\n                        item.splice(i, 1);\r\n                    };\r\n                }\r\n            })(state2);\r\n            return state2;\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\nconst listReducer2 = (state = [], action) => {\r\n    if (action.type === Selected) {\r\n        return action.id;\r\n    } else {\r\n        return state;\r\n    }\r\n}\r\nexport { listReducer1, listReducer2 };","import { Add, Remove, Selected, FilterSelected, Toggle, Edit } from './actionTypes';\r\n\r\nexport const addTask = (name) => ({\r\n    type: Add,\r\n    id: Date.parse(new Date()),\r\n    taskName: name\r\n});\r\nexport const removeTask = (taskId) => ({\r\n    type: Remove,\r\n    id: taskId\r\n});\r\nexport const thingSelected = (taskId) => ({\r\n    type: Selected,\r\n    id: taskId\r\n});\r\nexport const filterSelected = (name) => ({\r\n    type: FilterSelected,\r\n    filter: name\r\n});\r\nexport const toggle = (taskId) => ({\r\n    type: Toggle,\r\n    id: taskId\r\n});\r\nexport const edit = () => ({\r\n    type: Edit\r\n});\r\n","export const Add='TASK/Add';\r\nexport const Remove='TASK/Remove';\r\nexport const Selected='TASK/Selected';\r\nexport const FilterSelected='FilterSelected';\r\nexport const Toggle=\"TASK/Toggle\";\r\nexport const Edit = 'Content/edit';","export const FilterTypes={\r\n    ALL:'全部',\r\n    COMPLETED:'已完成',\r\n    UNCOMPLETED:'未完成'\r\n}\r\nexport const ContentTypes={\r\n    DISPLAY:'显示',\r\n    EDIT:'编辑'\r\n}","import { Add, Remove, Selected, FilterSelected, Toggle } from './actionTypes';\r\nimport { FilterTypes } from '../constants';\r\nconst taskReducer1 = (state = [], action) => {\r\n    switch (action.type) {\r\n        case Add: {\r\n            var _state = JSON.parse(JSON.stringify(state));\r\n            var bool = 1;\r\n            for (let i = 0; i < _state.length; i++) {\r\n                if (_state[i].taskId === action.selected) {\r\n                    for (let j in action.task) {\r\n                        _state[i][j] = action.task[j];\r\n                        bool = 0;\r\n                    }\r\n                }\r\n            }\r\n            if (bool) {\r\n                _state.push({\r\n                    parentId: action.id,\r\n                    taskId: Date.parse(new Date()),\r\n                    title: action.task.title,\r\n                    time: action.task.time,\r\n                    content: action.task.content,\r\n                    done: false\r\n                })\r\n            }\r\n            return _state;\r\n        }\r\n        case Remove: {\r\n            return state.filter(item => {\r\n                return item.taskId !== action.id;\r\n            })\r\n        }\r\n        case Toggle: {\r\n            return state.map(item => {\r\n                if (item.taskId === action.id) {\r\n                    return { ...item, done: action.done };\r\n                } else {\r\n                    return item;\r\n                }\r\n            })\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\nconst taskReducer2 = (state = [], action) => {\r\n    switch (action.type) {\r\n        case Selected: {\r\n            return action.id\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\nconst filterSelect = (state = FilterTypes.ALL, action) => {\r\n    switch (action.type) {\r\n        case FilterSelected: {\r\n            return { name: action.filter };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport { taskReducer1, taskReducer2, filterSelect };","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nconst TaskItem = ({ item, onSelect, onRemove, className }) => {\r\n    return (\r\n        <li task-id={item.taskId} onClick={onSelect} className={className}>\r\n            <input type='button' value='X' onClick={onRemove}></input>\r\n            <p className={item.done === true ? 'donetrue' : []}>{item.title}</p>\r\n        </li>\r\n    )\r\n}\r\nTaskItem.propTypes = {\r\n    item: PropTypes.object.isRequired,\r\n    onSelect: PropTypes.func.isRequired\r\n}\r\nexport default TaskItem;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport TaskItem from './taskItem';\r\nimport { removeTask, thingSelected } from '../actions';\r\nimport { FilterTypes } from '../../constants';\r\nconst TaskList = ({ task, selected, onSelect, onRemove, removeSelected }) => {\r\n    var obj = {};\r\n    task.forEach(item => {\r\n        if (!obj[item.time]) {\r\n            obj[item.time] = [];\r\n        }\r\n        obj[item.time].push(item);\r\n    });\r\n    var arr = [];\r\n    for (var i in obj) {\r\n        arr.push(obj[i]);\r\n    }\r\n    var jsx = <div id='list2' onClick={event => removeSelected(event.target)}>\r\n        {arr.map(item => (\r\n            <ul className='ul3' key={item[0].time}>\r\n                <span>{item[0].time}</span>\r\n                {item.map(item => (\r\n                    <TaskItem\r\n                        key={item.taskId}\r\n                        item={item}\r\n                        className={selected === item.taskId ? 'hover2' : []}\r\n                        onSelect={() => onSelect(item.taskId)}\r\n                        onRemove={() => onRemove(item.taskId)}\r\n                    />\r\n                )\r\n                )}\r\n            </ul>\r\n        ))}\r\n    </div>\r\n    return jsx;\r\n}\r\nfunction searchTask(id, task, filter) {\r\n    var arr = [];\r\n    for (let i = 0; i < task.length; i++) {\r\n        if (task[i].parentId === id) {\r\n            arr.push(task[i]);\r\n        }\r\n    }\r\n    switch (filter) {\r\n        case FilterTypes.ALL:\r\n            return arr;\r\n        case FilterTypes.UNCOMPLETED:\r\n            return arr.filter(item => !item.done);\r\n        case FilterTypes.COMPLETED:\r\n            return arr.filter(item => item.done);\r\n        default:\r\n            throw new Error('unsupported filter');\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        task: searchTask(state.selected, state.task, state.filter.name),\r\n        selected: state.selectedTask\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        onSelect: (id) => {\r\n            dispatch(thingSelected(id))\r\n        },\r\n        onRemove: (id) => {\r\n            dispatch(removeTask(id))\r\n        },\r\n        removeSelected: (obj) => {\r\n            if (obj.nodeName === \"DIV\") {\r\n                dispatch(thingSelected(null));\r\n            }\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskList);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { filterSelected } from '../actions';\r\nimport { FilterTypes } from '../../constants';\r\nconst Filter = ({ filter, onClick }) => {\r\n    return (\r\n        <div id='list1'>\r\n            <ul>\r\n                <li className={filter===FilterTypes.ALL?'hover3':[]} onClick={()=>onClick(FilterTypes.ALL)}>{FilterTypes.ALL}</li>\r\n                <li className={filter===FilterTypes.UNCOMPLETED?'hover3':[]} onClick={()=>onClick(FilterTypes.UNCOMPLETED)}>{FilterTypes.UNCOMPLETED}</li>\r\n                <li className={filter===FilterTypes.COMPLETED?'hover3':[]} onClick={()=>onClick(FilterTypes.COMPLETED)}>{FilterTypes.COMPLETED}</li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        filter: state.filter.name\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        onClick: (text) => {\r\n            dispatch(filterSelected(text));\r\n        }\r\n    }\r\n}\r\nFilter.propTypes={\r\n    onClick:PropTypes.func.isRequired\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React from 'react';\r\nimport TaskList from './taskList';\r\nimport Filter from './filter';\r\nimport './style.css';\r\nimport {connect} from 'react-redux';\r\nimport { thingSelected,edit } from '../actions';\r\nconst Task = ({onAdd,catId}) => {\r\n    return (\r\n        <div id='list'>\r\n            <Filter />\r\n            <TaskList />\r\n            <div className='foot foot2' onClick={()=>catId||catId===0?onAdd():[]}>添加任务</div>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        catId: state.selected,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        onAdd: () => {\r\n            dispatch(thingSelected(null));\r\n            dispatch(edit());\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Task)","export const Add = 'TASK/Add';\r\nexport const Display = 'Content/display';\r\nexport const Edit = 'Content/edit';\r\nexport const Toggle=\"TASK/Toggle\";","import * as actionTypes from './actionTypes';\r\n\r\nexport const addTask=(obj,catId,selected)=>({\r\n    type:actionTypes.Add,\r\n    task:obj,\r\n    id:catId,\r\n    selected:selected\r\n});\r\nexport const display=()=>({\r\n    type:actionTypes.Display\r\n});\r\nexport const edit=()=>({\r\n    type:actionTypes.Edit\r\n});\r\nexport const toggle=(taskId,bool)=>({\r\n    type:actionTypes.Toggle,\r\n    id:taskId,\r\n    done:bool\r\n});","import React, { Component } from 'react';\r\nimport { ContentTypes } from '../../constants';\r\n\r\nclass TaskContent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onInputChange = this.onInputChange.bind(this);\r\n    }\r\n    onInputChange(event) {\r\n        const _state = {\r\n            content: event.target.value\r\n        }\r\n        this.props.prop(_state);\r\n    }\r\n\r\n    render() {\r\n        if (this.props.active === ContentTypes.DISPLAY) {\r\n            return (\r\n                <div id=\"taskContent2\">{this.props.content}</div>\r\n            )\r\n        } else if (this.props.active === ContentTypes.EDIT) {\r\n            return (\r\n                <div><textarea cols=\"300\" rows=\"100\" placeholder=\"任务内容\" onChange={this.onInputChange} defaultValue={this.props.content} ></textarea></div>\r\n            )\r\n        }\r\n    }\r\n}\r\nexport default TaskContent;","import React, { Component } from 'react';\r\nimport { ContentTypes } from '../../constants';\r\n\r\nclass TaskName extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onInputChange = this.onInputChange.bind(this);\r\n    }\r\n    onInputChange(event) {\r\n        const _state={\r\n            title:event.target.value\r\n        }\r\n        this.props.prop(_state);\r\n    }\r\n    render() {\r\n        if (this.props.active === ContentTypes.DISPLAY) {\r\n            return (\r\n                <span>{this.props.title}</span>\r\n            )\r\n        } else if (this.props.active === ContentTypes.EDIT) {\r\n            return (\r\n                <span><input type=\"text\" placeholder=\"可输入十个字符以内\" onChange={this.onInputChange} defaultValue={this.props.title} /></span>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default TaskName;","import React, { Component } from 'react';\r\nimport { ContentTypes } from '../../constants';\r\n\r\nclass TaskTime extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onInputChange = this.onInputChange.bind(this);\r\n    }\r\n    onInputChange(event) {\r\n        const _state = {\r\n            time: event.target.value\r\n        }\r\n        this.props.prop(_state);\r\n    }\r\n    render() {\r\n        if (this.props.active === ContentTypes.DISPLAY) {\r\n            return (\r\n                <p>任务日期：<span>{this.props.time}</span></p>\r\n            )\r\n        } else if (this.props.active === ContentTypes.EDIT) {\r\n            return (\r\n                <p>任务日期：<span><input type=\"text\" placeholder=\"yyyy-mm-dd\" onChange={this.onInputChange} defaultValue={this.props.time} /></span></p>\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\nexport default TaskTime;","import React, { Component } from 'react';\r\nimport TaskContent from './taskContent';\r\nimport TaskName from './taskName';\r\nimport TaskTime from './taskTime';\r\nimport { ContentTypes } from '../../constants';\r\nimport * as actions from '../actions';\r\nimport {connect} from 'react-redux';\r\nimport './style.css';\r\nclass Content extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.deliver = this.deliver.bind(this);\r\n    }\r\n    deliver(obj) {\r\n        this.setState(obj);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='content'>\r\n                {this.props.active === ContentTypes.DISPLAY ? (\r\n                    <div className='content1'>\r\n                        <TaskName prop={this.deliver} title={this.props.target.title} active={this.props.active} />\r\n                        <input type=\"button\" value=\"编辑\" onClick={() => this.props.taskId||this.props.taskId===0?this.props.onEdit():[]} />\r\n                        <input type=\"button\" value=\"完成\" onClick={() => this.props.onChangeState(this.props.taskId,true)} />\r\n                        <input type=\"button\" value=\"取消完成\" onClick={() => this.props.onChangeState(this.props.taskId,false)} />\r\n                    </div>\r\n                ) : (\r\n                        <div className='content1'>\r\n                            <TaskName prop={this.deliver} title={this.props.target.title} active={this.props.active} />\r\n                            <input type=\"button\" value=\"取消\" onClick={() => this.props.onCancel()} />\r\n                            <input type=\"button\" value=\"确认\" onClick={() => this.props.onFinish(this.state,this.props.id,this.props.taskId)} />\r\n                        </div>\r\n                    )}\r\n                <TaskTime prop={this.deliver} time={this.props.target.time} active={this.props.active} />\r\n                <TaskContent prop={this.deliver} content={this.props.target.content} active={this.props.active} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nfunction searchTask(taskId, task) {\r\n    var target;\r\n    for (let i = 0; i < task.length; i++) {\r\n        if (task[i].taskId === taskId) {\r\n            target = task[i];\r\n        }\r\n    }\r\n    return target||0;\r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        target: searchTask(state.selectedTask, state.task),\r\n        active: state.taskState,\r\n        taskId: state.selectedTask,\r\n        id:state.selected\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        onEdit: () => {\r\n            dispatch(actions.edit())\r\n        },\r\n        onChangeState: (id,bool) => {\r\n            dispatch(actions.toggle(id,bool))\r\n        },\r\n        onCancel: () => {\r\n            dispatch(actions.display())\r\n        },\r\n        onFinish: (obj,id,selected) => {\r\n            if(obj.title.length>10||obj.time.search(/^\\d{4}-\\d{2}-\\d{2}$/)===-1||obj.content.length===0)return false;\r\n            dispatch(actions.addTask(obj,id,selected));\r\n            dispatch(actions.display())\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Content)","import React, { Component } from 'react';\r\nimport { view as List } from './list';\r\nimport { view as Task } from './task';\r\nimport { view as Content } from './content';\r\nimport { connect } from 'react-redux';\r\nclass TodoApp extends Component {\r\n    render() {\r\n        return (\r\n            <div className='div1' >\r\n                <List />\r\n                <Task />\r\n                <Content />\r\n            </div>\r\n        );\r\n    }\r\n    componentDidMount() {\r\n        localStorage.setItem('state', JSON.stringify(this.props.prop));\r\n    }\r\n    componentDidUpdate() {\r\n        localStorage.setItem('state', JSON.stringify(this.props.prop));\r\n    }\r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        prop: state\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(TodoApp)\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore, combineReducers } from 'redux';\r\nimport { listReducer1, listReducer2 } from './list';\r\nimport { reducer } from './task';\r\nimport { reducer as contentReducer } from './content';\r\n//const win = window;\r\n\r\nconst reducers = combineReducers({\r\n    list: listReducer1,\r\n    selected: listReducer2,\r\n    filter: reducer.filterSelect,\r\n    task: reducer.taskReducer1,\r\n    selectedTask: reducer.taskReducer2,\r\n    taskState: contentReducer\r\n});\r\n\r\nconst initialState = JSON.parse(localStorage.getItem('state'))||{\r\n    list: [\r\n        //默认分类 id设为0\r\n        {\r\n            id: 0,\r\n            catName: \"默认分类\",\r\n            //list为目录下的子分类 默认分类不可有子分类 故为空\r\n            list: [\r\n                {\r\n                    id: 1,\r\n                    catName: '默认分类子分类1',\r\n                    list: []\r\n                }, {\r\n                    id: 2,\r\n                    catName: '默认分类子分类2',\r\n                    list: []\r\n                }\r\n            ]\r\n        }\r\n        //接下来是后面可以新添加的分类\r\n    ],\r\n    selected: 0,\r\n    selectedTask: 0,\r\n    filter: {\r\n        name: '全部'\r\n    },\r\n    task: [\r\n        {\r\n            parentId: 0,\r\n            taskId: 0,\r\n            title: \"默认分类示例\",\r\n            time: \"1970-01-01\",\r\n            done: true,\r\n            content: \"任务内容\"\r\n        }\r\n    ],\r\n    taskState: '显示'\r\n};\r\nexport default createStore(reducers, initialState);","import * as actionTypes from './actionTypes';\r\nimport {ContentTypes} from '../constants';\r\n\r\nexport default (state=[],action)=>{\r\n    switch(action.type){\r\n        case actionTypes.Display:\r\n            return ContentTypes.DISPLAY;\r\n        case actionTypes.Edit:\r\n            return ContentTypes.EDIT;\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport TodoApp from './TodoApp';\nimport * as serviceWorker from './serviceWorker';\nimport store from './Store.js';\nReactDOM.render(\n    <Provider store={store}>\n        <TodoApp />\n    </Provider>\n    , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}